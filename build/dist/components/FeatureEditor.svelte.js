import './FeatureEditor.svelte.css';
/* src\components\FeatureEditor.svelte generated by Svelte v3.46.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	outro_and_destroy_block,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "svelte/internal";

import { getContext, onMount } from 'svelte';
import firebase from 'firebase/app';
import 'firebase/firestore';
import 'firebase/storage';
import slugify from 'slugify';
import InputMask from './InputMask.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[15] = list;
	child_ctx[16] = i;
	return child_ctx;
}

// (154:4) {#if !values.is_open}
function create_if_block(ctx) {
	let div1;
	let h2;
	let t1;
	let button;
	let t4;
	let div2;
	let t5;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;
	let if_block = /*values*/ ctx[2].values.length === 0 && create_if_block_1(ctx);
	let each_value = /*values*/ ctx[2].values;
	const get_key = ctx => /*i*/ ctx[16];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div1 = element("div");
			h2 = element("h2");
			h2.textContent = "Opções";
			t1 = space();
			button = element("button");

			button.innerHTML = `<div class="flex items-center justify-center w-10 h-10 ml-auto text-gray-100 rounded-full md:justify-start md:px-3 md:rounded bg-main-500 lg:justify-between lg:w-40 hover:bg-main-600 active:bg-main-400"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
            <span class="hidden w-full font-medium text-center md:block">Nova Opção</span></div>`;

			t4 = space();
			div2 = element("div");
			if (if_block) if_block.c();
			t5 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h2, "class", "w-full text-xl");
			attr(button, "class", "relative w-full ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div1, "class", "flex col-span-full");
			attr(div2, "class", "flex flex-col space-y-1 col-span-full");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h2);
			append(div1, t1);
			append(div1, button);
			insert(target, t4, anchor);
			insert(target, div2, anchor);
			if (if_block) if_block.m(div2, null);
			append(div2, t5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[10]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*values*/ ctx[2].values.length === 0) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div2, t5);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*deleteItem, values, featureNameOptions*/ 44) {
				each_value = /*values*/ ctx[2].values;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div2, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t4);
			if (detaching) detach(div2);
			if (if_block) if_block.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			dispose();
		}
	};
}

// (173:8) {#if values.values.length === 0}
function create_if_block_1(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "Lista vazia!";
			attr(span, "class", "font-semibold text-center text-md");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (177:8) {#each values.values as item, i (i)}
function create_each_block(key_1, ctx) {
	let div1;
	let inputmask;
	let updating_value;
	let t0;
	let div0;
	let button;
	let t1;
	let current;
	let mounted;
	let dispose;

	function inputmask_value_binding_1(value) {
		/*inputmask_value_binding_1*/ ctx[11](value, /*item*/ ctx[14]);
	}

	let inputmask_props = {
		type: "text",
		name: "title",
		class: "flex items-center w-full h-10 px-4 text-sm border-2 rounded",
		placeholder: "Digite um valor...",
		unmask: "typed",
		imask: /*featureNameOptions*/ ctx[3]
	};

	if (/*item*/ ctx[14].value !== void 0) {
		inputmask_props.value = /*item*/ ctx[14].value;
	}

	inputmask = new InputMask({ props: inputmask_props });
	binding_callbacks.push(() => bind(inputmask, 'value', inputmask_value_binding_1));

	function click_handler_1() {
		return /*click_handler_1*/ ctx[12](/*i*/ ctx[16]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			create_component(inputmask.$$.fragment);
			t0 = space();
			div0 = element("div");
			button = element("button");
			button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>`;
			t1 = space();
			attr(button, "title", "Excluir");
			attr(button, "class", "flex items-center justify-center p-2 text-red-500 rounded hover:bg-red-200 active:bg-red-100");
			attr(div0, "class", "flex ml-auto");
			attr(div1, "class", "flex items-center w-full");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(inputmask, div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, button);
			append(div1, t1);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const inputmask_changes = {};

			if (!updating_value && dirty & /*values*/ 4) {
				updating_value = true;
				inputmask_changes.value = /*item*/ ctx[14].value;
				add_flush_callback(() => updating_value = false);
			}

			inputmask.$set(inputmask_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inputmask.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inputmask.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(inputmask);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div3;
	let div0;
	let label0;
	let t1;
	let inputmask;
	let updating_value;
	let t2;
	let div1;
	let label1;
	let t4;
	let input;
	let t5;
	let label2;
	let t6;
	let t7;
	let div2;
	let button;

	let t8_value = (/*isCreating*/ ctx[0]
	? 'Criar Atributo'
	: 'Salvar Alterações') + "";

	let t8;
	let current;
	let mounted;
	let dispose;

	function inputmask_value_binding(value) {
		/*inputmask_value_binding*/ ctx[8](value);
	}

	let inputmask_props = {
		type: "text",
		name: "title",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*featureNameOptions*/ ctx[3]
	};

	if (/*values*/ ctx[2].name !== void 0) {
		inputmask_props.value = /*values*/ ctx[2].name;
	}

	inputmask = new InputMask({ props: inputmask_props });
	binding_callbacks.push(() => bind(inputmask, 'value', inputmask_value_binding));
	let if_block = !/*values*/ ctx[2].is_open && create_if_block(ctx);

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Nome";
			t1 = space();
			create_component(inputmask.$$.fragment);
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "Campo em aberto?";
			t4 = space();
			input = element("input");
			t5 = space();
			label2 = element("label");
			label2.innerHTML = `<span class="flex-shrink-0 w-4 h-4 bg-blue-500 rounded-full svelte-qberbe"></span>`;
			t6 = space();
			if (if_block) if_block.c();
			t7 = space();
			div2 = element("div");
			button = element("button");
			t8 = text(t8_value);
			attr(label0, "for", "title");
			attr(label0, "class", "text-xs font-semibold select-none");
			attr(div0, "class", "col-span-full");
			attr(label1, "for", "isOpen");
			attr(label1, "class", "mr-2 text-xs font-semibold select-none");
			attr(input, "type", "checkbox");
			attr(input, "id", "isOpenToggle");
			attr(input, "class", "hidden svelte-qberbe");
			attr(label2, "for", "isOpenToggle");
			attr(label2, "class", "flex items-center justify-start w-10 h-6 px-[2px] py-1 border-2 border-gray-300 rounded-full cursor-pointer svelte-qberbe");
			attr(div1, "class", "flex items-center col-span-full");
			attr(button, "class", "flex items-center justify-center flex-shrink-0 w-full h-full text-sm font-medium text-white rounded bg-main-500 disabled:bg-main-300 hover:bg-main-600 active:bg-main-400");
			button.disabled = /*isBusy*/ ctx[1];
			attr(div2, "class", "h-10 col-span-4 mt-3");
			attr(div3, "class", "grid w-full grid-cols-4 gap-4 px-4 pb-4");
			attr(div4, "class", "flex items-center w-full pt-8");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div0);
			append(div0, label0);
			append(div0, t1);
			mount_component(inputmask, div0, null);
			append(div3, t2);
			append(div3, div1);
			append(div1, label1);
			append(div1, t4);
			append(div1, input);
			input.checked = /*values*/ ctx[2].is_open;
			append(div1, t5);
			append(div1, label2);
			append(div3, t6);
			if (if_block) if_block.m(div3, null);
			append(div3, t7);
			append(div3, div2);
			append(div2, button);
			append(button, t8);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[9]),
					listen(button, "click", /*handleSubmit*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const inputmask_changes = {};

			if (!updating_value && dirty & /*values*/ 4) {
				updating_value = true;
				inputmask_changes.value = /*values*/ ctx[2].name;
				add_flush_callback(() => updating_value = false);
			}

			inputmask.$set(inputmask_changes);

			if (dirty & /*values*/ 4) {
				input.checked = /*values*/ ctx[2].is_open;
			}

			if (!/*values*/ ctx[2].is_open) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*values*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div3, t7);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*isCreating*/ 1) && t8_value !== (t8_value = (/*isCreating*/ ctx[0]
			? 'Criar Atributo'
			: 'Salvar Alterações') + "")) set_data(t8, t8_value);

			if (!current || dirty & /*isBusy*/ 2) {
				button.disabled = /*isBusy*/ ctx[1];
			}
		},
		i(local) {
			if (current) return;
			transition_in(inputmask.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(inputmask.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_component(inputmask);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { isCreating = false } = $$props;
	let { slug } = $$props;
	let isBusy = false;
	let values = { name: '', is_open: true, values: [] };
	const featureNameOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\s]+$/ };
	const { close } = getContext('simple-modal');

	onMount(() => {
		const db = firebase.firestore();

		// If we're editing an existing category, fetch its data
		if (!isCreating && slug) {
			$$invalidate(1, isBusy = true);

			db.collection('fields').doc(slug).get().then(doc => {
				const { name, is_open, values: opts } = doc.data();
				$$invalidate(2, values = { name, is_open, values: opts || [] });
				$$invalidate(1, isBusy = false);
			});
		}

		;
	});

	// Helpers
	const addItem = () => {
		values.values.push({ value: '' });
		$$invalidate(2, values.values = [...values.values], values);
	};

	const deleteItem = i => {
		values.values.splice(i, 1);
		$$invalidate(2, values.values = [...values.values], values);
	};

	const handleSubmit = () => {
		const db = firebase.firestore();
		if (values.name === '') return alert('Preencha o nome do atributo!');

		if (!values.is_open) {
			if (values.values.length === 0) return alert('Adicione pelo menos uma opção ao atributo!');
			if (values.values.some(opt => opt.value === '')) return alert('Preencha o valor de todas as opções!');
		}

		$$invalidate(1, isBusy = true);

		if (isCreating) {
			const slug = slugify(values.name, { lower: true });

			// Create a new feature document on firestore
			db.collection('fields').doc(slug).set({
				name: values.name,
				is_open: values.is_open,
				values: values.values,
				created_at: firebase.firestore.FieldValue.serverTimestamp()
			}).then(() => {
				close();
			}).catch(err => {
				alert(`Erro ao criar atributo: ${err}`);
				$$invalidate(1, isBusy = false);
			});
		} else {
			// Update the product document on firestore
			db.collection('fields').doc(slug).update({
				name: values.name,
				is_open: values.is_open,
				values: values.values
			}).then(() => {
				close();
			}).catch(err => {
				alert(`Erro ao atualizar atributo: ${err}`);
				$$invalidate(1, isBusy = false);
			});
		}
	};

	function inputmask_value_binding(value) {
		if ($$self.$$.not_equal(values.name, value)) {
			values.name = value;
			$$invalidate(2, values);
		}
	}

	function input_change_handler() {
		values.is_open = this.checked;
		$$invalidate(2, values);
	}

	const click_handler = () => addItem();

	function inputmask_value_binding_1(value, item) {
		if ($$self.$$.not_equal(item.value, value)) {
			item.value = value;
			$$invalidate(2, values);
		}
	}

	const click_handler_1 = i => deleteItem(i);

	$$self.$$set = $$props => {
		if ('isCreating' in $$props) $$invalidate(0, isCreating = $$props.isCreating);
		if ('slug' in $$props) $$invalidate(7, slug = $$props.slug);
	};

	return [
		isCreating,
		isBusy,
		values,
		featureNameOptions,
		addItem,
		deleteItem,
		handleSubmit,
		slug,
		inputmask_value_binding,
		input_change_handler,
		click_handler,
		inputmask_value_binding_1,
		click_handler_1
	];
}

class FeatureEditor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { isCreating: 0, slug: 7 });
	}
}

export default FeatureEditor;