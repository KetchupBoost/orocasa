import './ProductEditor.svelte.css.proxy.js';
/* src\components\ProductEditor.svelte generated by Svelte v3.46.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_block,
	destroy_component,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	svg_element,
	text,
	to_number,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../_snowpack/pkg/svelte/internal.js";

import { getContext, onMount } from '../../_snowpack/pkg/svelte.js';
import firebase from '../../_snowpack/pkg/firebase/app.js';
import '../../_snowpack/pkg/firebase/firestore.js';
import '../../_snowpack/pkg/firebase/storage.js';
import { Collection } from '../../_snowpack/pkg/sveltefire.js';
import InputMask from './InputMask.svelte.js';
import Multiselect from './Multiselect.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

// (317:14) {#each categories as category, i (i)}
function create_each_block(key_1, ctx) {
	let button;
	let t0_value = /*category*/ ctx[28].title + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[20](/*category*/ ctx[28]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr(button, "class", "w-full px-4 py-2 text-left hover:bg-gray-200");
			this.first = button;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*categories*/ 134217728 && t0_value !== (t0_value = /*category*/ ctx[28].title + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (312:12) <Collection                path={'categories'}                query={ref => ref.orderBy('title', 'asc')}                let:data={categories}              >
function create_default_slot(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value = /*categories*/ ctx[27];
	const get_key = ctx => /*i*/ ctx[30];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*setCategory, categories*/ 134221824) {
				each_value = /*categories*/ ctx[27];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block, each_1_anchor, get_each_context);
			}
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (375:6) {:else}
function create_else_block_1(ctx) {
	let div2;
	let div1;
	let div0;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");

			div0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="invisible w-12 h-12 text-gray-400 group-hover:text-gray-600 group-hover:visible" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg> 
              <span class="invisible pt-1 text-sm font-semibold tracking-wider text-gray-400 select-none group-hover:text-gray-600 group-hover:visible">Alterar imagem</span>`;

			attr(div0, "class", "absolute flex flex-col items-center justify-center w-full h-full border-4 border-dashed cursor-pointer t-0 l-0 hover:bg-gray-100 hover:border-gray-300");
			attr(div1, "class", "relative h-full bg-center bg-no-repeat bg-contain group w-60");
			set_style(div1, "background-image", "url(" + /*values*/ ctx[1].image + ")");
			attr(div2, "class", "flex items-center justify-center w-full h-60");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);

			if (!mounted) {
				dispose = listen(div1, "click", /*handleImageClick*/ ctx[13]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*values*/ 2) {
				set_style(div1, "background-image", "url(" + /*values*/ ctx[1].image + ")");
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			dispose();
		}
	};
}

// (352:6) {#if values.image === ''}
function create_if_block_1(ctx) {
	let div1;
	let div0;
	let div1_class_value;
	let mounted;
	let dispose;

	function select_block_type_1(ctx, dirty) {
		if (/*imageIsUploading*/ ctx[5]) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, [-1, -1]);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			attr(div0, "class", "flex flex-col items-center justify-center py-6");

			attr(div1, "class", div1_class_value = "flex flex-col w-full mt-1 border-4 border-dashed group " + (/*imageIsUploading*/ ctx[5]
			? 'cursor-wait'
			: 'cursor-pointer hover:bg-gray-100 hover:border-gray-300'));
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_block.m(div0, null);

			if (!mounted) {
				dispose = listen(div1, "click", /*handleImageClick*/ ctx[13]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_1(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			if (dirty[0] & /*imageIsUploading*/ 32 && div1_class_value !== (div1_class_value = "flex flex-col w-full mt-1 border-4 border-dashed group " + (/*imageIsUploading*/ ctx[5]
			? 'cursor-wait'
			: 'cursor-pointer hover:bg-gray-100 hover:border-gray-300'))) {
				attr(div1, "class", div1_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (365:12) {:else}
function create_else_block(ctx) {
	let svg;
	let path;
	let t0;
	let span;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			span = element("span");
			span.textContent = "Enviar uma imagem";
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "w-12 h-12 text-gray-400 group-hover:text-gray-600");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
			attr(span, "class", "pt-1 text-sm font-semibold tracking-wider text-gray-400 select-none group-hover:text-gray-600");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
			insert(target, t0, anchor);
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (detaching) detach(t0);
			if (detaching) detach(span);
		}
	};
}

// (358:12) {#if imageIsUploading}
function create_if_block_2(ctx) {
	let svg;
	let path;
	let t0;
	let span;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			span = element("span");
			span.textContent = "Enviando...";
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "w-12 h-12 text-gray-400 animate-bounce");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
			attr(span, "class", "pt-1 text-sm font-semibold tracking-wider text-gray-400 select-none");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
			insert(target, t0, anchor);
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (detaching) detach(t0);
			if (detaching) detach(span);
		}
	};
}

// (401:6) {#if !isCreating}
function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Excluir Produto";
			attr(button, "class", "w-full mt-2 font-medium bg-red-500 button hover:bg-red-600 active:bg-red-400 svelte-4ngngh");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*handleDelete*/ ctx[15]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div13;
	let div12;
	let div0;
	let label0;
	let t1;
	let inputmask0;
	let updating_value;
	let t2;
	let div2;
	let label1;
	let t4;
	let div1;
	let span0;
	let t6;
	let inputmask1;
	let updating_value_1;
	let t7;
	let div4;
	let label2;
	let t9;
	let div3;
	let button0;
	let svg0;
	let path0;
	let button0_disabled_value;
	let t10;
	let input0;
	let t11;
	let button1;
	let t12;
	let div8;
	let label3;
	let t14;
	let div7;
	let button2;
	let div5;
	let span1;
	let t15;
	let t16;
	let svg2;
	let path2;
	let t17;
	let div6;
	let collection;
	let t18;
	let div9;
	let label4;
	let t20;
	let multiselect;
	let updating_items;
	let updating_selected;
	let t21;
	let div10;
	let label5;
	let t23;
	let input1;
	let t24;
	let t25;
	let div11;
	let button3;

	let t26_value = (/*isCreating*/ ctx[0]
	? 'Criar Produto'
	: 'Salvar Alterações') + "";

	let t26;
	let t27;
	let div13_class_value;
	let current;
	let mounted;
	let dispose;

	function inputmask0_value_binding(value) {
		/*inputmask0_value_binding*/ ctx[17](value);
	}

	let inputmask0_props = {
		type: "text",
		name: "name",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*productNameOptions*/ ctx[7]
	};

	if (/*values*/ ctx[1].name !== void 0) {
		inputmask0_props.value = /*values*/ ctx[1].name;
	}

	inputmask0 = new InputMask({ props: inputmask0_props });
	binding_callbacks.push(() => bind(inputmask0, 'value', inputmask0_value_binding));

	function inputmask1_value_binding(value) {
		/*inputmask1_value_binding*/ ctx[18](value);
	}

	let inputmask1_props = {
		type: "text",
		name: "price",
		class: "w-full py-3 focus:outline-none",
		unmask: "typed",
		imask: /*productPriceOptions*/ ctx[8]
	};

	if (/*values*/ ctx[1].price !== void 0) {
		inputmask1_props.value = /*values*/ ctx[1].price;
	}

	inputmask1 = new InputMask({ props: inputmask1_props });
	binding_callbacks.push(() => bind(inputmask1, 'value', inputmask1_value_binding));

	collection = new Collection({
			props: {
				path: 'categories',
				query: func,
				$$slots: {
					default: [
						create_default_slot,
						({ data: categories }) => ({ 27: categories }),
						({ data: categories }) => [categories ? 134217728 : 0]
					]
				},
				$$scope: { ctx }
			}
		});

	function multiselect_items_binding(value) {
		/*multiselect_items_binding*/ ctx[21](value);
	}

	function multiselect_selected_binding(value) {
		/*multiselect_selected_binding*/ ctx[22](value);
	}

	let multiselect_props = { title: "Selecione um ou mais atributos" };

	if (/*featureItems*/ ctx[3] !== void 0) {
		multiselect_props.items = /*featureItems*/ ctx[3];
	}

	if (/*selectedFeatures*/ ctx[4] !== void 0) {
		multiselect_props.selected = /*selectedFeatures*/ ctx[4];
	}

	multiselect = new Multiselect({ props: multiselect_props });
	binding_callbacks.push(() => bind(multiselect, 'items', multiselect_items_binding));
	binding_callbacks.push(() => bind(multiselect, 'selected', multiselect_selected_binding));

	function select_block_type(ctx, dirty) {
		if (/*values*/ ctx[1].image === '') return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, [-1, -1]);
	let if_block0 = current_block_type(ctx);
	let if_block1 = !/*isCreating*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div13 = element("div");
			div12 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Nome";
			t1 = space();
			create_component(inputmask0.$$.fragment);
			t2 = space();
			div2 = element("div");
			label1 = element("label");
			label1.textContent = "Preço";
			t4 = space();
			div1 = element("div");
			span0 = element("span");
			span0.textContent = "R$";
			t6 = space();
			create_component(inputmask1.$$.fragment);
			t7 = space();
			div4 = element("div");
			label2 = element("label");
			label2.textContent = "Estoque";
			t9 = space();
			div3 = element("div");
			button0 = element("button");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t10 = space();
			input0 = element("input");
			t11 = space();
			button1 = element("button");
			button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>`;
			t12 = space();
			div8 = element("div");
			label3 = element("label");
			label3.textContent = "Categoria";
			t14 = space();
			div7 = element("div");
			button2 = element("button");
			div5 = element("div");
			span1 = element("span");
			t15 = text(/*categoryTitle*/ ctx[2]);
			t16 = space();
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t17 = space();
			div6 = element("div");
			create_component(collection.$$.fragment);
			t18 = space();
			div9 = element("div");
			label4 = element("label");
			label4.textContent = "Atributos";
			t20 = space();
			create_component(multiselect.$$.fragment);
			t21 = space();
			div10 = element("div");
			label5 = element("label");
			label5.textContent = "Imagem";
			t23 = space();
			input1 = element("input");
			t24 = space();
			if_block0.c();
			t25 = space();
			div11 = element("div");
			button3 = element("button");
			t26 = text(t26_value);
			t27 = space();
			if (if_block1) if_block1.c();
			attr(label0, "for", "name");
			attr(label0, "class", "label svelte-4ngngh");
			attr(div0, "class", "col-span-full");
			attr(label1, "for", "price");
			attr(label1, "class", "label svelte-4ngngh");
			attr(span0, "class", "select-none");
			attr(div1, "class", "border-box flex items-center w-full h-10 gap-2 px-4 mt-1 overflow-hidden text-sm border-2 rounded focus-within:border-black focus-within:border-2 focus-within:px-[16px]");
			attr(div2, "class", "col-span-full md:col-span-2");
			attr(label2, "for", "stock");
			attr(label2, "class", "label svelte-4ngngh");
			attr(path0, "fill-rule", "evenodd");
			attr(path0, "d", "M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z");
			attr(path0, "clip-rule", "evenodd");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "class", "w-5 h-5");
			attr(svg0, "viewBox", "0 0 20 20");
			attr(svg0, "fill", "currentColor");
			attr(button0, "class", "w-10 bg-main-500 button hover:bg-main-600 active:bg-main-400 svelte-4ngngh");
			attr(button0, "title", "Diminuir");
			button0.disabled = button0_disabled_value = /*values*/ ctx[1].stock === 0 || /*values*/ ctx[1].stock === null;
			attr(input0, "type", "number");
			attr(input0, "name", "stock");
			attr(input0, "class", "flex items-center w-full h-10 px-4 text-sm text-center border-2 rounded svelte-4ngngh");
			attr(button1, "class", "w-10 bg-main-500 button hover:bg-main-600 active:bg-main-400 svelte-4ngngh");
			attr(button1, "title", "Aumentar");
			attr(div3, "class", "flex items-center justify-between w-full h-10 gap-2 mt-1");
			attr(div4, "class", "col-span-full md:col-span-2");
			attr(label3, "for", "category");
			attr(label3, "class", "label svelte-4ngngh");
			attr(span1, "class", "text-sm");
			attr(path2, "fill-rule", "evenodd");
			attr(path2, "d", "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z");
			attr(path2, "clip-rule", "evenodd");
			attr(svg2, "class", "w-4 h-4");
			attr(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg2, "viewBox", "0 0 20 20");
			attr(svg2, "fill", "currentColor");
			attr(div5, "class", "flex items-center justify-between h-10 px-3 text-gray-700 border-2 rounded hover:bg-gray-200");
			attr(div6, "class", "absolute z-10 flex-col items-start hidden w-full pb-1 bg-white rounded shadow-lg group-focus:flex svelte-4ngngh");
			attr(button2, "class", "relative w-full text-sm focus:outline-none group sm:mt-0 svelte-4ngngh");
			attr(div7, "class", "flex items-center justify-between w-full h-10 gap-2 mt-1");
			attr(div8, "class", "col-span-full");
			attr(label4, "for", "features");
			attr(label4, "class", "label svelte-4ngngh");
			attr(div9, "class", "col-span-full");
			attr(label5, "for", "image");
			attr(label5, "class", "label svelte-4ngngh");
			attr(input1, "type", "file");
			attr(input1, "name", "image");
			attr(input1, "id", "image_file");
			attr(input1, "accept", "image/png,image/jpeg,image/webp");
			input1.hidden = true;
			attr(input1, "class", "svelte-4ngngh");
			attr(div10, "class", "col-span-full");
			attr(button3, "class", "w-full font-medium bg-main-500 button hover:bg-main-600 active:bg-main-400 svelte-4ngngh");
			attr(div11, "class", "h-10 col-span-4 mt-3");
			attr(div12, "class", "grid w-full grid-cols-4 gap-4 px-4 pb-4");
			attr(div13, "class", div13_class_value = "flex items-center w-full pt-8 " + (!/*isCreating*/ ctx[0] && 'pb-12') + " svelte-4ngngh");
		},
		m(target, anchor) {
			insert(target, div13, anchor);
			append(div13, div12);
			append(div12, div0);
			append(div0, label0);
			append(div0, t1);
			mount_component(inputmask0, div0, null);
			append(div12, t2);
			append(div12, div2);
			append(div2, label1);
			append(div2, t4);
			append(div2, div1);
			append(div1, span0);
			append(div1, t6);
			mount_component(inputmask1, div1, null);
			append(div12, t7);
			append(div12, div4);
			append(div4, label2);
			append(div4, t9);
			append(div4, div3);
			append(div3, button0);
			append(button0, svg0);
			append(svg0, path0);
			append(div3, t10);
			append(div3, input0);
			set_input_value(input0, /*values*/ ctx[1].stock);
			append(div3, t11);
			append(div3, button1);
			append(div12, t12);
			append(div12, div8);
			append(div8, label3);
			append(div8, t14);
			append(div8, div7);
			append(div7, button2);
			append(button2, div5);
			append(div5, span1);
			append(span1, t15);
			append(div5, t16);
			append(div5, svg2);
			append(svg2, path2);
			append(button2, t17);
			append(button2, div6);
			mount_component(collection, div6, null);
			append(div12, t18);
			append(div12, div9);
			append(div9, label4);
			append(div9, t20);
			mount_component(multiselect, div9, null);
			append(div12, t21);
			append(div12, div10);
			append(div10, label5);
			append(div10, t23);
			append(div10, input1);
			/*input1_binding*/ ctx[23](input1);
			append(div10, t24);
			if_block0.m(div10, null);
			append(div12, t25);
			append(div12, div11);
			append(div11, button3);
			append(button3, t26);
			append(div11, t27);
			if (if_block1) if_block1.m(div11, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*decreaseStock*/ ctx[9]),
					listen(input0, "input", /*input0_input_handler*/ ctx[19]),
					listen(input0, "change", /*handleStockChange*/ ctx[11]),
					listen(button1, "click", /*increaseStock*/ ctx[10]),
					listen(button3, "click", /*handleSubmit*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const inputmask0_changes = {};

			if (!updating_value && dirty[0] & /*values*/ 2) {
				updating_value = true;
				inputmask0_changes.value = /*values*/ ctx[1].name;
				add_flush_callback(() => updating_value = false);
			}

			inputmask0.$set(inputmask0_changes);
			const inputmask1_changes = {};

			if (!updating_value_1 && dirty[0] & /*values*/ 2) {
				updating_value_1 = true;
				inputmask1_changes.value = /*values*/ ctx[1].price;
				add_flush_callback(() => updating_value_1 = false);
			}

			inputmask1.$set(inputmask1_changes);

			if (!current || dirty[0] & /*values*/ 2 && button0_disabled_value !== (button0_disabled_value = /*values*/ ctx[1].stock === 0 || /*values*/ ctx[1].stock === null)) {
				button0.disabled = button0_disabled_value;
			}

			if (dirty[0] & /*values*/ 2 && to_number(input0.value) !== /*values*/ ctx[1].stock) {
				set_input_value(input0, /*values*/ ctx[1].stock);
			}

			if (!current || dirty[0] & /*categoryTitle*/ 4) set_data(t15, /*categoryTitle*/ ctx[2]);
			const collection_changes = {};

			if (dirty[0] & /*categories*/ 134217728 | dirty[1] & /*$$scope*/ 1) {
				collection_changes.$$scope = { dirty, ctx };
			}

			collection.$set(collection_changes);
			const multiselect_changes = {};

			if (!updating_items && dirty[0] & /*featureItems*/ 8) {
				updating_items = true;
				multiselect_changes.items = /*featureItems*/ ctx[3];
				add_flush_callback(() => updating_items = false);
			}

			if (!updating_selected && dirty[0] & /*selectedFeatures*/ 16) {
				updating_selected = true;
				multiselect_changes.selected = /*selectedFeatures*/ ctx[4];
				add_flush_callback(() => updating_selected = false);
			}

			multiselect.$set(multiselect_changes);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div10, null);
				}
			}

			if ((!current || dirty[0] & /*isCreating*/ 1) && t26_value !== (t26_value = (/*isCreating*/ ctx[0]
			? 'Criar Produto'
			: 'Salvar Alterações') + "")) set_data(t26, t26_value);

			if (!/*isCreating*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div11, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty[0] & /*isCreating*/ 1 && div13_class_value !== (div13_class_value = "flex items-center w-full pt-8 " + (!/*isCreating*/ ctx[0] && 'pb-12') + " svelte-4ngngh")) {
				attr(div13, "class", div13_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(inputmask0.$$.fragment, local);
			transition_in(inputmask1.$$.fragment, local);
			transition_in(collection.$$.fragment, local);
			transition_in(multiselect.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inputmask0.$$.fragment, local);
			transition_out(inputmask1.$$.fragment, local);
			transition_out(collection.$$.fragment, local);
			transition_out(multiselect.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div13);
			destroy_component(inputmask0);
			destroy_component(inputmask1);
			destroy_component(collection);
			destroy_component(multiselect);
			/*input1_binding*/ ctx[23](null);
			if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

const func = ref => ref.orderBy('title', 'asc');

function instance($$self, $$props, $$invalidate) {
	let { isCreating = false } = $$props;
	let { id } = $$props;

	let values = {
		name: '',
		price: '0',
		image: '',
		stock: 0,
		category: null,
		features: []
	};

	let categoryTitle = 'Selecione uma categoria';

	// let featureNames = [];
	let featureItems = {};

	let selectedFeatures = [];
	let imageIsUploading = false;
	let imageFile;

	// Input masks
	const productNameOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ0-9\s]+$/ };

	const productPriceOptions = {
		mask: Number,
		scale: 2,
		signed: false,
		thousandsSeparator: '.',
		radix: ',',
		mapToRadix: ['.'],
		padFractionalZeros: true,
		normalizeZeros: true,
		min: 0.0,
		max: 9999999.99
	};

	const db = firebase.firestore();

	// Fetch all features from firebase
	db.collection('fields').get().then(snapshot => {
		snapshot.forEach(doc => {
			$$invalidate(3, featureItems[doc.id] = doc.data().name, featureItems);
		});

		$$invalidate(3, featureItems = { ...featureItems });
	});

	// If we're editing an existing product, fetch its data
	if (!isCreating && id) {
		db.collection('products').doc(id).get().then(doc => {
			$$invalidate(1, values = doc.data());

			// Fetch category title
			db.collection('categories').doc(values.category.toString()).get().then(doc => {
				$$invalidate(2, categoryTitle = doc.data().title);
			}).catch(err => {
				console.error(err);
			});

			// Fetch selected features
			$$invalidate(4, selectedFeatures = [...values.features]);
		});
	}

	;

	onMount(() => {
		// Handle image uploading
		imageFile.addEventListener('change', () => {
			if (imageFile.files.length === 0) return;
			doImageUpload();
		});
	});

	// Helpers
	const { close } = getContext('simple-modal');

	const decreaseStock = () => {
		$$invalidate(1, values.stock--, values);
	};

	const increaseStock = () => {
		if (values.stock > 99998) return;
		$$invalidate(1, values.stock++, values);
	};

	const handleStockChange = () => {
		if (values.stock === null || values.stock < 0) $$invalidate(1, values.stock = 0, values); else if (values.stock > 99999) $$invalidate(1, values.stock = 99999, values);
	};

	const setCategory = (id, title) => {
		$$invalidate(1, values.category = id, values);
		$$invalidate(2, categoryTitle = title);
	};

	const handleImageClick = () => {
		if (imageIsUploading) return;
		imageFile.click();
	};

	const doImageUpload = () => {
		if (imageFile.files.length === 0) return;
		const storage = firebase.storage();

		if (values.image !== '') {
			// Delete the old image from the storage first
			storage.refFromURL(values.image).delete();

			$$invalidate(1, values.image = '', values);
		}

		// Upload image to firebase storage
		$$invalidate(5, imageIsUploading = true);

		const file = imageFile.files[0];
		const productImagesRef = storage.ref().child(`images/products/${file.name}`);

		productImagesRef.put(file).then(async snapshot => {
			$$invalidate(1, values.image = await snapshot.ref.getDownloadURL(), values);
			$$invalidate(5, imageIsUploading = false);
		});
	};

	// FIXME: Delete the image from storage if the user doesn't submit the form
	const handleSubmit = () => {
		const db = firebase.firestore();

		if (values.name === '') {
			alert('Preencha o nome do produto!');
			return;
		}

		if (values.category === null) {
			alert('Selecione uma categoria!');
			return;
		}

		if (values.image === '') {
			alert('Envie uma imagem!');
			return;
		}

		if (isCreating) {
			// Create a product document on firestore
			const productRef = db.collection('products').doc();

			productRef.set({
				name: values.name,
				price: values.price,
				image: values.image,
				stock: values.stock,
				category: values.category,
				created_in: firebase.firestore.FieldValue.serverTimestamp()
			}).then(() => {
				close();
			}).catch(err => {
				alert(`Erro ao criar produto: ${err}`);
			});
		} else {
			// Update the product document on firestore
			db.collection('products').doc(id).update({
				name: values.name,
				price: values.price,
				image: values.image,
				stock: values.stock,
				category: values.category,
				features: selectedFeatures
			}).then(() => {
				close();
			}).catch(err => {
				alert(`Erro ao atualizar produto: ${err}`);
			});
		}
	};

	const handleDelete = () => {
		if (!confirm('Tem certeza que deseja excluir este produto?')) return;

		// Delete the product document from firestore
		firebase.firestore().collection('products').doc(id).delete().then(() => {
			close();
		});
	};

	function inputmask0_value_binding(value) {
		if ($$self.$$.not_equal(values.name, value)) {
			values.name = value;
			$$invalidate(1, values);
		}
	}

	function inputmask1_value_binding(value) {
		if ($$self.$$.not_equal(values.price, value)) {
			values.price = value;
			$$invalidate(1, values);
		}
	}

	function input0_input_handler() {
		values.stock = to_number(this.value);
		$$invalidate(1, values);
	}

	const click_handler = category => setCategory(parseInt(category.id), category.title);

	function multiselect_items_binding(value) {
		featureItems = value;
		$$invalidate(3, featureItems);
	}

	function multiselect_selected_binding(value) {
		selectedFeatures = value;
		$$invalidate(4, selectedFeatures);
	}

	function input1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			imageFile = $$value;
			$$invalidate(6, imageFile);
		});
	}

	$$self.$$set = $$props => {
		if ('isCreating' in $$props) $$invalidate(0, isCreating = $$props.isCreating);
		if ('id' in $$props) $$invalidate(16, id = $$props.id);
	};

	return [
		isCreating,
		values,
		categoryTitle,
		featureItems,
		selectedFeatures,
		imageIsUploading,
		imageFile,
		productNameOptions,
		productPriceOptions,
		decreaseStock,
		increaseStock,
		handleStockChange,
		setCategory,
		handleImageClick,
		handleSubmit,
		handleDelete,
		id,
		inputmask0_value_binding,
		inputmask1_value_binding,
		input0_input_handler,
		click_handler,
		multiselect_items_binding,
		multiselect_selected_binding,
		input1_binding
	];
}

class ProductEditor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { isCreating: 0, id: 16 }, null, [-1, -1]);
	}
}

export default ProductEditor;