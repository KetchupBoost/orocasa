import './Config.svelte.css.proxy.js';
/* src\pages\admin\Config.svelte generated by Svelte v3.46.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_block,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../_snowpack/pkg/svelte/internal.js";

import { getContext } from '../../../_snowpack/pkg/svelte.js';
import firebase from '../../../_snowpack/pkg/firebase/app.js';
import '../../../_snowpack/pkg/firebase/firestore.js';
import InputMask from '../../components/InputMask.svelte.js';
import TextareaMask from '../../components/TextareaMask.svelte.js';
import ListImageEditor from '../../components/ListImageEditor.svelte.js';
import ListItemEditor from '../../components/ListItemEditor.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[32] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

// (222:6) {#if values['landing-data'].hero_images.length === 0}
function create_if_block_2(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "Lista vazia.";
			attr(span, "class", "font-semibold text-md");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (226:6) {#each values['landing-data'].hero_images as _, i (i)}
function create_each_block_2(key_1, ctx) {
	let div1;
	let span;
	let t0;
	let t1_value = /*i*/ ctx[30] + 1 + "";
	let t1;
	let t2;
	let div0;
	let button0;
	let t3;
	let button1;
	let t4;
	let mounted;
	let dispose;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[14](/*i*/ ctx[30]);
	}

	function click_handler_3() {
		return /*click_handler_3*/ ctx[15](/*i*/ ctx[30]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text("Imagem ");
			t1 = text(t1_value);
			t2 = space();
			div0 = element("div");
			button0 = element("button");
			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>`;
			t3 = space();
			button1 = element("button");
			button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>`;
			t4 = space();
			attr(span, "class", "text-sm");
			attr(button0, "title", "Editar");
			attr(button0, "class", "flex items-center justify-center p-2 text-blue-500 rounded hover:bg-blue-200 active:bg-blue-100");
			attr(button1, "title", "Excluir");
			attr(button1, "class", "flex items-center justify-center p-2 text-red-500 rounded hover:bg-red-200 active:bg-red-100");
			attr(div0, "class", "flex ml-auto");
			attr(div1, "class", "flex items-center w-full px-2 odd:bg-gray-100");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(span, t1);
			append(div1, t2);
			append(div1, div0);
			append(div0, button0);
			append(div0, t3);
			append(div0, button1);
			append(div1, t4);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler_2),
					listen(button1, "click", click_handler_3)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*values*/ 1 && t1_value !== (t1_value = /*i*/ ctx[30] + 1 + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (325:6) {#if values['landing-data'].slide_items.length === 0}
function create_if_block_1(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "Lista vazia.";
			attr(span, "class", "font-semibold text-md");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (329:6) {#each values['landing-data'].slide_items as item, i (i)}
function create_each_block_1(key_1, ctx) {
	let div1;
	let span;
	let t0_value = /*item*/ ctx[28].name + "";
	let t0;
	let t1;
	let div0;
	let button0;
	let t2;
	let button1;
	let t3;
	let mounted;
	let dispose;

	function click_handler_6() {
		return /*click_handler_6*/ ctx[20](/*i*/ ctx[30]);
	}

	function click_handler_7() {
		return /*click_handler_7*/ ctx[21](/*i*/ ctx[30]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			button0 = element("button");
			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>`;
			t2 = space();
			button1 = element("button");
			button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>`;
			t3 = space();
			attr(span, "class", "text-sm");
			attr(button0, "title", "Editar");
			attr(button0, "class", "flex items-center justify-center p-2 text-blue-500 rounded hover:bg-blue-200 active:bg-blue-100");
			attr(button1, "title", "Excluir");
			attr(button1, "class", "flex items-center justify-center p-2 text-red-500 rounded hover:bg-red-200 active:bg-red-100");
			attr(div0, "class", "flex ml-auto");
			attr(div1, "class", "flex items-center w-full px-2 odd:bg-gray-100");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, button0);
			append(div0, t2);
			append(div0, button1);
			append(div1, t3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler_6),
					listen(button1, "click", click_handler_7)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*values*/ 1 && t0_value !== (t0_value = /*item*/ ctx[28].name + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (377:6) {#if values['landing-data'].project_slide_items.length === 0}
function create_if_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "Lista vazia.";
			attr(span, "class", "font-semibold text-md");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (381:6) {#each values['landing-data'].project_slide_items as item, i (i)}
function create_each_block(key_1, ctx) {
	let div1;
	let span;
	let t0_value = /*item*/ ctx[28].name + "";
	let t0;
	let t1;
	let div0;
	let button0;
	let t2;
	let button1;
	let t3;
	let mounted;
	let dispose;

	function click_handler_9() {
		return /*click_handler_9*/ ctx[23](/*i*/ ctx[30]);
	}

	function click_handler_10() {
		return /*click_handler_10*/ ctx[24](/*i*/ ctx[30]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			button0 = element("button");
			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>`;
			t2 = space();
			button1 = element("button");
			button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>`;
			t3 = space();
			attr(span, "class", "text-sm");
			attr(button0, "title", "Editar");
			attr(button0, "class", "flex items-center justify-center p-2 text-blue-500 rounded hover:bg-blue-200 active:bg-blue-100");
			attr(button1, "title", "Excluir");
			attr(button1, "class", "flex items-center justify-center p-2 text-red-500 rounded hover:bg-red-200 active:bg-red-100");
			attr(div0, "class", "flex ml-auto");
			attr(div1, "class", "flex items-center w-full px-2 odd:bg-gray-100");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, button0);
			append(div0, t2);
			append(div0, button1);
			append(div1, t3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler_9),
					listen(button1, "click", click_handler_10)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*values*/ 1 && t0_value !== (t0_value = /*item*/ ctx[28].name + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let t0;
	let main;
	let h1;
	let t2;
	let div4;
	let h20;
	let t4;
	let div0;
	let label0;
	let t6;
	let inputmask0;
	let updating_value;
	let t7;
	let div1;
	let label1;
	let t9;
	let inputmask1;
	let updating_value_1;
	let t10;
	let div2;
	let label2;
	let t12;
	let textareamask0;
	let updating_value_2;
	let t13;
	let div3;
	let button0;
	let t15;
	let div8;
	let div6;
	let h21;
	let t17;
	let button1;
	let t20;
	let div7;
	let t21;
	let each_blocks_2 = [];
	let each0_lookup = new Map();
	let t22;
	let div12;
	let h22;
	let t24;
	let div9;
	let label3;
	let t26;
	let br;
	let t27;
	let label4;
	let t29;
	let textareamask1;
	let updating_value_3;
	let t30;
	let div10;
	let label5;
	let t32;
	let textareamask2;
	let updating_value_4;
	let t33;
	let div11;
	let button2;
	let t35;
	let div16;
	let div14;
	let h23;
	let t37;
	let button3;
	let t40;
	let div15;
	let t41;
	let each_blocks_1 = [];
	let each1_lookup = new Map();
	let t42;
	let div20;
	let div18;
	let h24;
	let t44;
	let button4;
	let t47;
	let div19;
	let t48;
	let each_blocks = [];
	let each2_lookup = new Map();
	let current;
	let mounted;
	let dispose;

	function inputmask0_value_binding(value) {
		/*inputmask0_value_binding*/ ctx[9](value);
	}

	let inputmask0_props = {
		type: "text",
		name: "heroHeader",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*textValueOptions*/ ctx[2]
	};

	if (/*values*/ ctx[0]['landing-data'].hero_header !== void 0) {
		inputmask0_props.value = /*values*/ ctx[0]['landing-data'].hero_header;
	}

	inputmask0 = new InputMask({ props: inputmask0_props });
	binding_callbacks.push(() => bind(inputmask0, 'value', inputmask0_value_binding));

	function inputmask1_value_binding(value) {
		/*inputmask1_value_binding*/ ctx[10](value);
	}

	let inputmask1_props = {
		type: "text",
		name: "heroSub",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*textValueOptions*/ ctx[2]
	};

	if (/*values*/ ctx[0]['landing-data'].hero_sub !== void 0) {
		inputmask1_props.value = /*values*/ ctx[0]['landing-data'].hero_sub;
	}

	inputmask1 = new InputMask({ props: inputmask1_props });
	binding_callbacks.push(() => bind(inputmask1, 'value', inputmask1_value_binding));

	function textareamask0_value_binding(value) {
		/*textareamask0_value_binding*/ ctx[11](value);
	}

	let textareamask0_props = {
		name: "heroText",
		class: "flex items-center w-full p-4 mt-1 text-sm border-2 rounded h-36",
		unmask: "typed",
		imask: /*textValueOptions*/ ctx[2]
	};

	if (/*values*/ ctx[0]['landing-data'].hero_text !== void 0) {
		textareamask0_props.value = /*values*/ ctx[0]['landing-data'].hero_text;
	}

	textareamask0 = new TextareaMask({ props: textareamask0_props });
	binding_callbacks.push(() => bind(textareamask0, 'value', textareamask0_value_binding));
	let if_block0 = /*values*/ ctx[0]['landing-data'].hero_images.length === 0 && create_if_block_2(ctx);
	let each_value_2 = /*values*/ ctx[0]['landing-data'].hero_images;
	const get_key = ctx => /*i*/ ctx[30];

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_2[i] = create_each_block_2(key, child_ctx));
	}

	function textareamask1_value_binding(value) {
		/*textareamask1_value_binding*/ ctx[16](value);
	}

	let textareamask1_props = {
		name: "aboutHeader",
		class: "flex items-center w-full p-4 mt-1 text-sm border-2 rounded h-36",
		unmask: "typed",
		imask: /*textValueOptions*/ ctx[2]
	};

	if (/*values*/ ctx[0]['landing-data'].about_header !== void 0) {
		textareamask1_props.value = /*values*/ ctx[0]['landing-data'].about_header;
	}

	textareamask1 = new TextareaMask({ props: textareamask1_props });
	binding_callbacks.push(() => bind(textareamask1, 'value', textareamask1_value_binding));

	function textareamask2_value_binding(value) {
		/*textareamask2_value_binding*/ ctx[17](value);
	}

	let textareamask2_props = {
		name: "aboutText",
		class: "flex items-center w-full p-4 mt-1 text-sm border-2 rounded h-36",
		unmask: "typed",
		imask: /*textValueOptions*/ ctx[2]
	};

	if (/*values*/ ctx[0]['landing-data'].about_text !== void 0) {
		textareamask2_props.value = /*values*/ ctx[0]['landing-data'].about_text;
	}

	textareamask2 = new TextareaMask({ props: textareamask2_props });
	binding_callbacks.push(() => bind(textareamask2, 'value', textareamask2_value_binding));
	let if_block1 = /*values*/ ctx[0]['landing-data'].slide_items.length === 0 && create_if_block_1(ctx);
	let each_value_1 = /*values*/ ctx[0]['landing-data'].slide_items;
	const get_key_1 = ctx => /*i*/ ctx[30];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
	}

	let if_block2 = /*values*/ ctx[0]['landing-data'].project_slide_items.length === 0 && create_if_block(ctx);
	let each_value = /*values*/ ctx[0]['landing-data'].project_slide_items;
	const get_key_2 = ctx => /*i*/ ctx[30];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key_2(child_ctx);
		each2_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			t0 = space();
			main = element("main");
			h1 = element("h1");
			h1.textContent = "Configurações";
			t2 = space();
			div4 = element("div");
			h20 = element("h2");
			h20.textContent = "Herói";
			t4 = space();
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Título";
			t6 = space();
			create_component(inputmask0.$$.fragment);
			t7 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "Subtítulo";
			t9 = space();
			create_component(inputmask1.$$.fragment);
			t10 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "Texto";
			t12 = space();
			create_component(textareamask0.$$.fragment);
			t13 = space();
			div3 = element("div");
			button0 = element("button");
			button0.textContent = "Salvar Alterações";
			t15 = space();
			div8 = element("div");
			div6 = element("div");
			h21 = element("h2");
			h21.textContent = "Carrossel de Imagens";
			t17 = space();
			button1 = element("button");

			button1.innerHTML = `<div class="flex items-center justify-center w-10 h-10 ml-auto text-gray-100 rounded-full md:justify-start md:px-3 md:rounded bg-main-500 lg:justify-between lg:w-40 hover:bg-main-600 active:bg-main-400"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
          <span class="hidden w-full font-medium text-center md:block">Novo Item</span></div>`;

			t20 = space();
			div7 = element("div");
			if (if_block0) if_block0.c();
			t21 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t22 = space();
			div12 = element("div");
			h22 = element("h2");
			h22.textContent = "Sobre";
			t24 = space();
			div9 = element("div");
			label3 = element("label");
			label3.textContent = "Título";
			t26 = space();
			br = element("br");
			t27 = space();
			label4 = element("label");
			label4.innerHTML = `<i>Obs: É possível escrever em *negrito* e _itálico_.</i>`;
			t29 = space();
			create_component(textareamask1.$$.fragment);
			t30 = space();
			div10 = element("div");
			label5 = element("label");
			label5.textContent = "Texto";
			t32 = space();
			create_component(textareamask2.$$.fragment);
			t33 = space();
			div11 = element("div");
			button2 = element("button");
			button2.textContent = "Salvar Alterações";
			t35 = space();
			div16 = element("div");
			div14 = element("div");
			h23 = element("h2");
			h23.textContent = "Produtos";
			t37 = space();
			button3 = element("button");

			button3.innerHTML = `<div class="flex items-center justify-center w-10 h-10 ml-auto text-gray-100 rounded-full md:justify-start md:px-3 md:rounded bg-main-500 lg:justify-between lg:w-40 hover:bg-main-600 active:bg-main-400"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
          <span class="hidden w-full font-medium text-center md:block">Novo Item</span></div>`;

			t40 = space();
			div15 = element("div");
			if (if_block1) if_block1.c();
			t41 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t42 = space();
			div20 = element("div");
			div18 = element("div");
			h24 = element("h2");
			h24.textContent = "Portfólio";
			t44 = space();
			button4 = element("button");

			button4.innerHTML = `<div class="flex items-center justify-center w-10 h-10 ml-auto text-gray-100 rounded-full md:justify-start md:px-3 md:rounded bg-main-500 lg:justify-between lg:w-40 hover:bg-main-600 active:bg-main-400"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
          <span class="hidden w-full font-medium text-center md:block">Novo Item</span></div>`;

			t47 = space();
			div19 = element("div");
			if (if_block2) if_block2.c();
			t48 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			document.title = "Admin - Configurações";
			attr(h1, "class", "text-3xl");
			attr(h20, "class", "text-xl col-span-full");
			attr(label0, "for", "heroHeader");
			attr(label0, "class", "label svelte-1hpph2n");
			attr(div0, "class", "col-span-full");
			attr(label1, "for", "heroSub");
			attr(label1, "class", "label svelte-1hpph2n");
			attr(div1, "class", "col-span-full");
			attr(label2, "for", "heroText");
			attr(label2, "class", "label svelte-1hpph2n");
			attr(div2, "class", "col-span-full");
			attr(button0, "class", "w-full h-10 px-4 mt-1 text-sm font-semibold bg-blue-500 rounded hover:bg-blue-600 active:bg-blue-400 text-blue-50");
			attr(div3, "class", "col-span-full");
			attr(div4, "class", "grid w-full grid-cols-6 gap-4 p-3 py-5 mt-6 bg-white rounded-lg shadow-md md:p-6");
			attr(h21, "class", "flex-shrink-0 text-xl col-span-full");
			attr(button1, "class", "relative w-full ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div6, "class", "flex w-full");
			attr(div7, "class", "flex flex-col w-full space-y-1");
			attr(div8, "class", "flex flex-col w-full gap-4 p-3 py-5 mt-6 bg-white rounded-lg shadow-md md:p-6");
			attr(h22, "class", "text-xl col-span-full");
			attr(label3, "for", "aboutHeader");
			attr(label3, "class", "label svelte-1hpph2n");
			attr(label4, "for", "aboutHeader");
			attr(label4, "class", "label svelte-1hpph2n");
			attr(div9, "class", "col-span-full");
			attr(label5, "for", "aboutText");
			attr(label5, "class", "label svelte-1hpph2n");
			attr(div10, "class", "col-span-full");
			attr(button2, "class", "w-full h-10 px-4 mt-1 text-sm font-semibold bg-blue-500 rounded hover:bg-blue-600 active:bg-blue-400 text-blue-50");
			attr(div11, "class", "col-span-full");
			attr(div12, "class", "grid w-full grid-cols-6 gap-4 p-3 py-5 mt-6 bg-white rounded-lg shadow-md md:p-6");
			attr(h23, "class", "text-xl col-span-full");
			attr(button3, "class", "relative w-full ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div14, "class", "flex w-full");
			attr(div15, "class", "flex flex-col w-full space-y-1");
			attr(div16, "class", "flex flex-col w-full gap-4 p-3 py-5 mt-6 bg-white rounded-lg shadow-md md:p-6");
			attr(h24, "class", "text-xl col-span-full");
			attr(button4, "class", "relative w-full ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div18, "class", "flex w-full");
			attr(div19, "class", "flex flex-col w-full space-y-1");
			attr(div20, "class", "flex flex-col w-full gap-4 p-3 py-5 mt-6 mb-5 bg-white rounded-lg shadow-md md:p-6");
			attr(main, "class", "flex flex-col w-screen min-h-screen p-4 pt-8 overflow-y-auto text-gray-800 bg-gray-50 md:p-8");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, main, anchor);
			append(main, h1);
			append(main, t2);
			append(main, div4);
			append(div4, h20);
			append(div4, t4);
			append(div4, div0);
			append(div0, label0);
			append(div0, t6);
			mount_component(inputmask0, div0, null);
			append(div4, t7);
			append(div4, div1);
			append(div1, label1);
			append(div1, t9);
			mount_component(inputmask1, div1, null);
			append(div4, t10);
			append(div4, div2);
			append(div2, label2);
			append(div2, t12);
			mount_component(textareamask0, div2, null);
			append(div4, t13);
			append(div4, div3);
			append(div3, button0);
			append(main, t15);
			append(main, div8);
			append(div8, div6);
			append(div6, h21);
			append(div6, t17);
			append(div6, button1);
			append(div8, t20);
			append(div8, div7);
			if (if_block0) if_block0.m(div7, null);
			append(div7, t21);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div7, null);
			}

			append(main, t22);
			append(main, div12);
			append(div12, h22);
			append(div12, t24);
			append(div12, div9);
			append(div9, label3);
			append(div9, t26);
			append(div9, br);
			append(div9, t27);
			append(div9, label4);
			append(div9, t29);
			mount_component(textareamask1, div9, null);
			append(div12, t30);
			append(div12, div10);
			append(div10, label5);
			append(div10, t32);
			mount_component(textareamask2, div10, null);
			append(div12, t33);
			append(div12, div11);
			append(div11, button2);
			append(main, t35);
			append(main, div16);
			append(div16, div14);
			append(div14, h23);
			append(div14, t37);
			append(div14, button3);
			append(div16, t40);
			append(div16, div15);
			if (if_block1) if_block1.m(div15, null);
			append(div15, t41);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div15, null);
			}

			append(main, t42);
			append(main, div20);
			append(div20, div18);
			append(div18, h24);
			append(div18, t44);
			append(div18, button4);
			append(div20, t47);
			append(div20, div19);
			if (if_block2) if_block2.m(div19, null);
			append(div19, t48);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div19, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[12]),
					listen(button1, "click", /*click_handler_1*/ ctx[13]),
					listen(button2, "click", /*click_handler_4*/ ctx[18]),
					listen(button3, "click", /*click_handler_5*/ ctx[19]),
					listen(button4, "click", /*click_handler_8*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const inputmask0_changes = {};

			if (!updating_value && dirty[0] & /*values*/ 1) {
				updating_value = true;
				inputmask0_changes.value = /*values*/ ctx[0]['landing-data'].hero_header;
				add_flush_callback(() => updating_value = false);
			}

			inputmask0.$set(inputmask0_changes);
			const inputmask1_changes = {};

			if (!updating_value_1 && dirty[0] & /*values*/ 1) {
				updating_value_1 = true;
				inputmask1_changes.value = /*values*/ ctx[0]['landing-data'].hero_sub;
				add_flush_callback(() => updating_value_1 = false);
			}

			inputmask1.$set(inputmask1_changes);
			const textareamask0_changes = {};

			if (!updating_value_2 && dirty[0] & /*values*/ 1) {
				updating_value_2 = true;
				textareamask0_changes.value = /*values*/ ctx[0]['landing-data'].hero_text;
				add_flush_callback(() => updating_value_2 = false);
			}

			textareamask0.$set(textareamask0_changes);

			if (/*values*/ ctx[0]['landing-data'].hero_images.length === 0) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div7, t21);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*deleteListItem, values, showListImageEditor*/ 273) {
				each_value_2 = /*values*/ ctx[0]['landing-data'].hero_images;
				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key, 1, ctx, each_value_2, each0_lookup, div7, destroy_block, create_each_block_2, null, get_each_context_2);
			}

			const textareamask1_changes = {};

			if (!updating_value_3 && dirty[0] & /*values*/ 1) {
				updating_value_3 = true;
				textareamask1_changes.value = /*values*/ ctx[0]['landing-data'].about_header;
				add_flush_callback(() => updating_value_3 = false);
			}

			textareamask1.$set(textareamask1_changes);
			const textareamask2_changes = {};

			if (!updating_value_4 && dirty[0] & /*values*/ 1) {
				updating_value_4 = true;
				textareamask2_changes.value = /*values*/ ctx[0]['landing-data'].about_text;
				add_flush_callback(() => updating_value_4 = false);
			}

			textareamask2.$set(textareamask2_changes);

			if (/*values*/ ctx[0]['landing-data'].slide_items.length === 0) {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div15, t41);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*deleteListItem, values, showListItemEditor*/ 289) {
				each_value_1 = /*values*/ ctx[0]['landing-data'].slide_items;
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_1, 1, ctx, each_value_1, each1_lookup, div15, destroy_block, create_each_block_1, null, get_each_context_1);
			}

			if (/*values*/ ctx[0]['landing-data'].project_slide_items.length === 0) {
				if (if_block2) {
					
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div19, t48);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*deleteListItem, values, showListItemEditor*/ 289) {
				each_value = /*values*/ ctx[0]['landing-data'].project_slide_items;
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, each_value, each2_lookup, div19, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i(local) {
			if (current) return;
			transition_in(inputmask0.$$.fragment, local);
			transition_in(inputmask1.$$.fragment, local);
			transition_in(textareamask0.$$.fragment, local);
			transition_in(textareamask1.$$.fragment, local);
			transition_in(textareamask2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inputmask0.$$.fragment, local);
			transition_out(inputmask1.$$.fragment, local);
			transition_out(textareamask0.$$.fragment, local);
			transition_out(textareamask1.$$.fragment, local);
			transition_out(textareamask2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(main);
			destroy_component(inputmask0);
			destroy_component(inputmask1);
			destroy_component(textareamask0);
			if (if_block0) if_block0.d();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].d();
			}

			destroy_component(textareamask1);
			destroy_component(textareamask2);
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			if (if_block2) if_block2.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const db = firebase.firestore();
	const { open } = getContext('simple-modal');

	let values = {
		'landing-data': {
			about_header: '',
			about_text: '',
			hero_header: '',
			hero_sub: '',
			hero_text: '',
			hero_images: [],
			project_slide_items: [],
			slide_items: []
		}
	};

	// Input masks
	const textValueOptions = {
		mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\/\(\)\,\.\!\&\%\$\#\@\"\'\*0-9\s]+$/
	};

	// Helpers
	const fetchValuesFromDB = () => {
		db.collection('settings').doc('landing-data').get().then(doc => {
			const data = doc.data();
			$$invalidate(0, values['landing-data'] = data, values);
			$$invalidate(0, values['landing-data'].about_header = toTextarea(data.about_header), values);
			$$invalidate(0, values['landing-data'].about_text = toTextarea(data.about_text), values);
			$$invalidate(0, values['landing-data'].hero_text = toTextarea(data.hero_text), values);
			$$invalidate(0, values = { ...values });
		});
	};

	const toTextarea = text => text.replaceAll('<b>', '*').replaceAll('</b>', '*').replaceAll('<br>', '\r\n');
	const fromTextarea = text => text.replace(/(?:\*)([A-Za-zÀ-ÖØ-öø-ÿ.,!?&0-9\s]+)(?:\*)/gm, '<b>$1</b>').replace(/(?:\_)([A-Za-zÀ-ÖØ-öø-ÿ.,!?&0-9\s]+)(?:\_)/gm, '<i>$1</i>').replaceAll('\n', '<br>');

	const showListImageEditor = (list, index) => {
		open(ListImageEditor, {
			list,
			index,
			onClosed: () => {
				fetchValuesFromDB();
			}
		});
	};

	const showListItemEditor = (list, index) => {
		open(ListItemEditor, {
			list,
			index,
			onClosed: () => {
				fetchValuesFromDB();
			}
		});
	};

	const addListImage = list => {
		values['landing-data'][list].push({ url: '' });
		$$invalidate(0, values['landing-data'][list] = [...values['landing-data'][list]], values);

		// Update firebase
		db.collection('settings').doc('landing-data').update({ [list]: values['landing-data'][list] });
	};

	const addListItem = list => {
		values['landing-data'][list].push({ image: '', name: 'Sem Título', text: '' });
		$$invalidate(0, values['landing-data'][list] = [...values['landing-data'][list]], values);

		// Update firebase
		db.collection('settings').doc('landing-data').update({ [list]: values['landing-data'][list] });
	};

	const deleteListItem = (list, index) => {
		if (values['landing-data'][list].length > 1) {
			values['landing-data'][list].splice(index, 1);
			$$invalidate(0, values['landing-data'][list] = [...values['landing-data'][list]], values);

			// Update firebase
			db.collection('settings').doc('landing-data').update({ [list]: values['landing-data'][list] });
		}
	};

	// Load values from firebase
	fetchValuesFromDB();

	function inputmask0_value_binding(value) {
		if ($$self.$$.not_equal(values['landing-data'].hero_header, value)) {
			values['landing-data'].hero_header = value;
			$$invalidate(0, values);
		}
	}

	function inputmask1_value_binding(value) {
		if ($$self.$$.not_equal(values['landing-data'].hero_sub, value)) {
			values['landing-data'].hero_sub = value;
			$$invalidate(0, values);
		}
	}

	function textareamask0_value_binding(value) {
		if ($$self.$$.not_equal(values['landing-data'].hero_text, value)) {
			values['landing-data'].hero_text = value;
			$$invalidate(0, values);
		}
	}

	const click_handler = () => {
		db.collection('settings').doc('landing-data').update({
			hero_header: fromTextarea(values['landing-data'].hero_header),
			hero_sub: fromTextarea(values['landing-data'].hero_sub),
			hero_text: fromTextarea(values['landing-data'].hero_text)
		});
	};

	const click_handler_1 = () => addListImage('hero_images');
	const click_handler_2 = i => showListImageEditor('hero_images', i);
	const click_handler_3 = i => deleteListItem('hero_images', i);

	function textareamask1_value_binding(value) {
		if ($$self.$$.not_equal(values['landing-data'].about_header, value)) {
			values['landing-data'].about_header = value;
			$$invalidate(0, values);
		}
	}

	function textareamask2_value_binding(value) {
		if ($$self.$$.not_equal(values['landing-data'].about_text, value)) {
			values['landing-data'].about_text = value;
			$$invalidate(0, values);
		}
	}

	const click_handler_4 = () => {
		db.collection('settings').doc('landing-data').update({
			about_header: fromTextarea(values['landing-data'].about_header),
			about_text: fromTextarea(values['landing-data'].about_text)
		});
	};

	const click_handler_5 = () => addListItem('slide_items');
	const click_handler_6 = i => showListItemEditor('slide_items', i);
	const click_handler_7 = i => deleteListItem('slide_items', i);
	const click_handler_8 = () => addListItem('project_slide_items');
	const click_handler_9 = i => showListItemEditor('project_slide_items', i);
	const click_handler_10 = i => deleteListItem('project_slide_items', i);

	return [
		values,
		db,
		textValueOptions,
		fromTextarea,
		showListImageEditor,
		showListItemEditor,
		addListImage,
		addListItem,
		deleteListItem,
		inputmask0_value_binding,
		inputmask1_value_binding,
		textareamask0_value_binding,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		textareamask1_value_binding,
		textareamask2_value_binding,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		click_handler_9,
		click_handler_10
	];
}

class Config extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1]);
	}
}

export default Config;