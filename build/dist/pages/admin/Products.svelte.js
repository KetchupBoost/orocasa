import './Products.svelte.css.proxy.js';
/* src\pages\admin\Products.svelte generated by Svelte v3.46.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_block,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	noop,
	outro_and_destroy_block,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	svg_element,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../_snowpack/pkg/svelte/internal.js";

import { getContext } from '../../../_snowpack/pkg/svelte.js';
import '../../../_snowpack/pkg/firebase/firestore.js';
import { Collection, Doc } from '../../../_snowpack/pkg/sveltefire.js';
import ProductEditor from '../../components/ProductEditor.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

// (137:8) {:else}
function create_else_block_1(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>`;
			attr(button, "class", "flex items-center justify-center px-2");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[12]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (131:8) {#if currentSearchTerm === ''}
function create_if_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>`;
			attr(div, "class", "flex items-center justify-center px-2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (172:10) {#each categories as category, i (i)}
function create_each_block_2(key_1, ctx) {
	let button;
	let t0_value = /*category*/ ctx[24].title + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[14](/*category*/ ctx[24]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr(button, "class", "w-full px-4 py-2 text-left hover:bg-gray-200");
			this.first = button;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_3);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*categories*/ 134217728 && t0_value !== (t0_value = /*category*/ ctx[24].title + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (167:8) <Collection            path={'categories'}            query={ref => ref.orderBy('title')}            let:data={categories}          >
function create_default_slot_2(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value_2 = /*categories*/ ctx[27];
	const get_key = ctx => /*i*/ ctx[23];

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*setCategory, parseInt, categories*/ 134217984) {
				each_value_2 = /*categories*/ ctx[27];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block_2, each_1_anchor, get_each_context_2);
			}
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (195:8) {#each sortingModes as mode, i (i)}
function create_each_block_1(key_1, ctx) {
	let button;
	let t0_value = /*mode*/ ctx[25].title + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[15](/*i*/ ctx[23]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr(button, "class", "w-full px-4 py-2 text-left hover:bg-gray-200");
			this.first = button;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_4);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (222:4) {#if filterSearch(products, currentSearchTerm).length === 0}
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> 
        <span class="font-semibold text-md">Nenhum produto encontrado.</span>`;

			attr(div, "class", "flex flex-col items-center justify-center w-full h-full space-y-3 text-gray-500");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (247:16) <Doc                    path={`categories/${product.category}`}                    let:data={category}                  >
function create_default_slot_1(ctx) {
	let button;
	let t_value = /*category*/ ctx[24].title + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "text-xs font-medium select-none text-main-500");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*setCategory*/ ctx[8](/*product*/ ctx[21].category, /*category*/ ctx[24].title))) /*setCategory*/ ctx[8](/*product*/ ctx[21].category, /*category*/ ctx[24].title).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*category*/ 16777216 && t_value !== (t_value = /*category*/ ctx[24].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (261:18) {:else}
function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("IndisponÃ­vel");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (259:18) {#if product.stock > 0}
function create_if_block(ctx) {
	let t0_value = /*product*/ ctx[21].stock + "";
	let t0;
	let t1;

	return {
		c() {
			t0 = text(t0_value);
			t1 = text(" em estoque");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*products, currentSearchTerm*/ 1048580 && t0_value !== (t0_value = /*product*/ ctx[21].stock + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (232:6) {#each filterSearch(products, currentSearchTerm) as product, i (i)}
function create_each_block(key_1, ctx) {
	let div5;
	let div1;
	let div0;
	let t0;
	let div4;
	let div3;
	let span0;
	let t1_value = /*product*/ ctx[21].name + "";
	let t1;
	let t2;
	let div2;
	let doc;
	let t3;
	let span1;
	let t4;
	let span2;
	let t5_value = /*formatPrice*/ ctx[5](/*product*/ ctx[21].price) + "";
	let t5;
	let t6;
	let current;
	let mounted;
	let dispose;

	function click_handler_5() {
		return /*click_handler_5*/ ctx[16](/*product*/ ctx[21]);
	}

	doc = new Doc({
			props: {
				path: `categories/${/*product*/ ctx[21].category}`,
				$$slots: {
					default: [
						create_default_slot_1,
						({ data: category }) => ({ 24: category }),
						({ data: category }) => category ? 16777216 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	function select_block_type_1(ctx, dirty) {
		if (/*product*/ ctx[21].stock > 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			div5 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			div4 = element("div");
			div3 = element("div");
			span0 = element("span");
			t1 = text(t1_value);
			t2 = space();
			div2 = element("div");
			create_component(doc.$$.fragment);
			t3 = space();
			span1 = element("span");
			if_block.c();
			t4 = space();
			span2 = element("span");
			t5 = text(t5_value);
			t6 = space();
			attr(div0, "class", "w-full h-full bg-center bg-no-repeat bg-contain product-image svelte-11m2pfp");
			set_style(div0, "background-image", "url(" + /*product*/ ctx[21].image + ")");
			attr(div1, "class", "block h-64 overflow-hidden bg-white rounded-lg shadow-lg cursor-pointer");
			attr(span0, "class", "font-medium");
			attr(span1, "class", "text-xs font-medium select-none");
			attr(div2, "class", "flex flex-col items-start");
			attr(div3, "class", "flex flex-col");
			attr(span2, "class", "flex items-center h-8 px-2 text-sm rounded text-main-600 bg-main-200 whitespace-nowrap");
			attr(div4, "class", "flex items-center justify-between mt-3");
			attr(div5, "class", "product");
			this.first = div5;
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div1);
			append(div1, div0);
			append(div5, t0);
			append(div5, div4);
			append(div4, div3);
			append(div3, span0);
			append(span0, t1);
			append(div3, t2);
			append(div3, div2);
			mount_component(doc, div2, null);
			append(div2, t3);
			append(div2, span1);
			if_block.m(span1, null);
			append(div4, t4);
			append(div4, span2);
			append(span2, t5);
			append(div5, t6);
			current = true;

			if (!mounted) {
				dispose = listen(div1, "click", click_handler_5);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty & /*products, currentSearchTerm*/ 1048580) {
				set_style(div0, "background-image", "url(" + /*product*/ ctx[21].image + ")");
			}

			if ((!current || dirty & /*products, currentSearchTerm*/ 1048580) && t1_value !== (t1_value = /*product*/ ctx[21].name + "")) set_data(t1, t1_value);
			const doc_changes = {};
			if (dirty & /*products, currentSearchTerm*/ 1048580) doc_changes.path = `categories/${/*product*/ ctx[21].category}`;

			if (dirty & /*$$scope, products, currentSearchTerm, category*/ 554696708) {
				doc_changes.$$scope = { dirty, ctx };
			}

			doc.$set(doc_changes);

			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span1, null);
				}
			}

			if ((!current || dirty & /*products, currentSearchTerm*/ 1048580) && t5_value !== (t5_value = /*formatPrice*/ ctx[5](/*product*/ ctx[21].price) + "")) set_data(t5, t5_value);
		},
		i(local) {
			if (current) return;
			transition_in(doc.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(doc.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_component(doc);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (208:2) <Collection path={'products'} query={productQ} let:data={products}>
function create_default_slot(ctx) {
	let show_if = /*filterSearch*/ ctx[6](/*products*/ ctx[20], /*currentSearchTerm*/ ctx[2]).length === 0;
	let t;
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let if_block = show_if && create_if_block_1(ctx);
	let each_value = /*filterSearch*/ ctx[6](/*products*/ ctx[20], /*currentSearchTerm*/ ctx[2]);
	const get_key = ctx => /*i*/ ctx[23];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "grid w-full grid-cols-1 gap-6 mt-6 2xl:grid-cols-5 xl:grid-cols-4 lg:grid-cols-3 sm:grid-cols-2 lg:gap-y-8 svelte-11m2pfp");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*products, currentSearchTerm*/ 1048580) show_if = /*filterSearch*/ ctx[6](/*products*/ ctx[20], /*currentSearchTerm*/ ctx[2]).length === 0;

			if (show_if) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*formatPrice, filterSearch, products, currentSearchTerm, setCategory, category, showProductEditor*/ 17826660) {
				each_value = /*filterSearch*/ ctx[6](/*products*/ ctx[20], /*currentSearchTerm*/ ctx[2]);
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (209:4) 
function create_loading_slot(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 text-gray-500 animate-bounce" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path></svg>`;
			attr(div, "slot", "loading");
			attr(div, "class", "flex items-center justify-center w-full h-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (215:4) 
function create_fallback_slot(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> 
      <span class="font-semibold text-md">Erro ao carregar dados!</span>`;

			attr(div, "slot", "fallback");
			attr(div, "class", "flex flex-col items-center justify-center w-full h-full space-y-3 text-gray-500");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let t0;
	let main;
	let h1;
	let t2;
	let div7;
	let button0;
	let t5;
	let div2;
	let div1;
	let input;
	let t6;
	let t7;
	let button2;
	let div3;
	let span1;
	let t8;
	let t9;
	let svg1;
	let path1;
	let t10;
	let div4;
	let button1;
	let t12;
	let collection0;
	let t13;
	let button3;
	let div5;
	let span2;
	let t14_value = /*sortingModes*/ ctx[4][/*selectedSortingMode*/ ctx[1]].title + "";
	let t14;
	let t15;
	let svg2;
	let path2;
	let t16;
	let div6;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t17;
	let collection1;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*currentSearchTerm*/ ctx[2] === '') return create_if_block_2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	collection0 = new Collection({
			props: {
				path: 'categories',
				query: func,
				$$slots: {
					default: [
						create_default_slot_2,
						({ data: categories }) => ({ 27: categories }),
						({ data: categories }) => categories ? 134217728 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	let each_value_1 = /*sortingModes*/ ctx[4];
	const get_key = ctx => /*i*/ ctx[23];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	collection1 = new Collection({
			props: {
				path: 'products',
				query: /*productQ*/ ctx[3],
				$$slots: {
					fallback: [
						create_fallback_slot,
						({ data: products }) => ({ 20: products }),
						({ data: products }) => products ? 1048576 : 0
					],
					loading: [
						create_loading_slot,
						({ data: products }) => ({ 20: products }),
						({ data: products }) => products ? 1048576 : 0
					],
					default: [
						create_default_slot,
						({ data: products }) => ({ 20: products }),
						({ data: products }) => products ? 1048576 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			t0 = space();
			main = element("main");
			h1 = element("h1");
			h1.textContent = "Produtos";
			t2 = space();
			div7 = element("div");
			button0 = element("button");

			button0.innerHTML = `<div class="flex items-center justify-start w-full h-10 px-3 text-gray-100 rounded bg-main-500 lg:justify-between lg:w-40 hover:bg-main-600 active:bg-main-400"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg> 
        <span class="w-full font-medium text-center">Novo Produto</span></div>`;

			t5 = space();
			div2 = element("div");
			div1 = element("div");
			input = element("input");
			t6 = space();
			if_block.c();
			t7 = space();
			button2 = element("button");
			div3 = element("div");
			span1 = element("span");
			t8 = text(/*currentCategoryTitle*/ ctx[0]);
			t9 = space();
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t10 = space();
			div4 = element("div");
			button1 = element("button");
			button1.textContent = "Todas as Categorias";
			t12 = space();
			create_component(collection0.$$.fragment);
			t13 = space();
			button3 = element("button");
			div5 = element("div");
			span2 = element("span");
			t14 = text(t14_value);
			t15 = space();
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t16 = space();
			div6 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t17 = space();
			create_component(collection1.$$.fragment);
			document.title = "Admin - Produtos";
			attr(h1, "class", "text-3xl");
			attr(button0, "class", "relative w-full mt-4 text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(input, "class", "flex items-center w-full h-full px-4 rounded bg-gray-50 focus:outline-none");
			attr(input, "type", "text");
			attr(input, "placeholder", "Pesquisar por Nome");
			attr(div1, "class", "flex items-center justify-between w-full h-10 border-2 border-gray-300 rounded lg:w-50 focus-within:border-2 focus-within:border-black");
			attr(div2, "class", "relative w-full mt-4 ml-auto mr-6 text-sm lg:pl-6 lg:w-auto lg:mt-0");
			attr(span1, "class", "font-medium");
			attr(path1, "fill-rule", "evenodd");
			attr(path1, "d", "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z");
			attr(path1, "clip-rule", "evenodd");
			attr(svg1, "class", "w-4 h-4");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "viewBox", "0 0 20 20");
			attr(svg1, "fill", "currentColor");
			attr(div3, "class", "flex items-center justify-between h-10 px-3 border-2 border-gray-300 rounded hover:bg-gray-300");
			attr(button1, "class", "w-full px-4 py-2 text-left hover:bg-gray-200");
			attr(div4, "class", "absolute z-10 flex-col items-start hidden w-full pb-1 bg-white rounded shadow-lg group-focus:flex svelte-11m2pfp");
			attr(button2, "class", "relative w-full mt-4 mr-3 text-sm lg:w-48 focus:outline-none group lg:mt-0 svelte-11m2pfp");
			attr(span2, "class", "font-medium");
			attr(path2, "fill-rule", "evenodd");
			attr(path2, "d", "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z");
			attr(path2, "clip-rule", "evenodd");
			attr(svg2, "class", "w-4 h-4");
			attr(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg2, "viewBox", "0 0 20 20");
			attr(svg2, "fill", "currentColor");
			attr(div5, "class", "flex items-center justify-between h-10 px-3 border-2 border-gray-300 rounded hover:bg-gray-300");
			attr(div6, "class", "absolute z-10 flex-col items-start hidden w-full pb-1 bg-white rounded shadow-lg group-focus:flex svelte-11m2pfp");
			attr(button3, "class", "relative w-full mt-4 text-sm lg:w-48 focus:outline-none group lg:mt-0 svelte-11m2pfp");
			attr(div7, "class", "flex flex-col mt-6 lg:flex-row lg:items-end lg:justify-between");
			attr(main, "class", "flex flex-col w-screen min-h-screen p-4 pt-8 overflow-y-auto text-gray-800 bg-gray-50 md:p-8");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, main, anchor);
			append(main, h1);
			append(main, t2);
			append(main, div7);
			append(div7, button0);
			append(div7, t5);
			append(div7, div2);
			append(div2, div1);
			append(div1, input);
			set_input_value(input, /*currentSearchTerm*/ ctx[2]);
			append(div1, t6);
			if_block.m(div1, null);
			append(div7, t7);
			append(div7, button2);
			append(button2, div3);
			append(div3, span1);
			append(span1, t8);
			append(div3, t9);
			append(div3, svg1);
			append(svg1, path1);
			append(button2, t10);
			append(button2, div4);
			append(div4, button1);
			append(div4, t12);
			mount_component(collection0, div4, null);
			append(div7, t13);
			append(div7, button3);
			append(button3, div5);
			append(div5, span2);
			append(span2, t14);
			append(div5, t15);
			append(div5, svg2);
			append(svg2, path2);
			append(button3, t16);
			append(button3, div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div6, null);
			}

			append(main, t17);
			mount_component(collection1, main, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[10]),
					listen(input, "input", /*input_input_handler*/ ctx[11]),
					listen(button1, "click", /*click_handler_2*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*currentSearchTerm*/ 4 && input.value !== /*currentSearchTerm*/ ctx[2]) {
				set_input_value(input, /*currentSearchTerm*/ ctx[2]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div1, null);
				}
			}

			if (!current || dirty & /*currentCategoryTitle*/ 1) set_data(t8, /*currentCategoryTitle*/ ctx[0]);
			const collection0_changes = {};

			if (dirty & /*$$scope, categories*/ 671088640) {
				collection0_changes.$$scope = { dirty, ctx };
			}

			collection0.$set(collection0_changes);
			if ((!current || dirty & /*selectedSortingMode*/ 2) && t14_value !== (t14_value = /*sortingModes*/ ctx[4][/*selectedSortingMode*/ ctx[1]].title + "")) set_data(t14, t14_value);

			if (dirty & /*changeSortingMode, sortingModes*/ 144) {
				each_value_1 = /*sortingModes*/ ctx[4];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div6, destroy_block, create_each_block_1, null, get_each_context_1);
			}

			const collection1_changes = {};
			if (dirty & /*productQ*/ 8) collection1_changes.query = /*productQ*/ ctx[3];

			if (dirty & /*$$scope, products, currentSearchTerm*/ 537919492) {
				collection1_changes.$$scope = { dirty, ctx };
			}

			collection1.$set(collection1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(collection0.$$.fragment, local);
			transition_in(collection1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(collection0.$$.fragment, local);
			transition_out(collection1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(main);
			if_block.d();
			destroy_component(collection0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			destroy_component(collection1);
			mounted = false;
			run_all(dispose);
		}
	};
}

const func = ref => ref.orderBy('title');

function instance($$self, $$props, $$invalidate) {
	const { open } = getContext('simple-modal');

	const sortingModes = [
		{
			title: 'Ordem AlfabÃ©tica',
			field: 'name',
			order: 'asc'
		},
		{
			title: 'Mais Novos',
			field: 'created_in',
			order: 'desc'
		},
		{
			title: 'Mais Antigos',
			field: 'created_in',
			order: 'asc'
		},
		{
			title: 'Maior PreÃ§o',
			field: 'price',
			order: 'desc'
		},
		{
			title: 'Menor PreÃ§o',
			field: 'price',
			order: 'asc'
		}
	];

	let currentCategory = '';
	let currentCategoryTitle = 'Todas as Categorias';
	let selectedSortingMode = 0;
	let currentSearchTerm = '';
	let productQ = ref => ref.orderBy('name', 'asc');

	// Helpers
	const formatPrice = price => {
		const formatter = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' });
		return formatter.format(price);
	};

	const filterSearch = (items, term) => {
		if (term === '') return items;

		return items.filter(item => {
			const name = item.name.toLowerCase();
			const searchTerm = term.toLowerCase();
			return name.includes(searchTerm);
		});
	};

	const updateQuery = async () => {
		const mode = sortingModes[selectedSortingMode];

		if (currentCategory === '') {
			$$invalidate(3, productQ = ref => ref.orderBy(mode.field, mode.order));
		} else {
			$$invalidate(3, productQ = ref => ref.orderBy(mode.field, mode.order).where('category', '==', currentCategory));
		}
	};

	const changeSortingMode = newIndex => {
		$$invalidate(1, selectedSortingMode = newIndex);
		updateQuery();
	};

	const setCategory = (id, title) => {
		currentCategory = id;
		$$invalidate(0, currentCategoryTitle = title);
		updateQuery();
	};

	const showProductEditor = (isCreating, id) => {
		open(ProductEditor, { isCreating, id });
	};

	const click_handler = () => showProductEditor(true);

	function input_input_handler() {
		currentSearchTerm = this.value;
		$$invalidate(2, currentSearchTerm);
	}

	const click_handler_1 = () => $$invalidate(2, currentSearchTerm = '');
	const click_handler_2 = () => setCategory('', 'Todas as Categorias');
	const click_handler_3 = category => setCategory(parseInt(category.id), category.title);
	const click_handler_4 = i => changeSortingMode(i);
	const click_handler_5 = product => showProductEditor(false, product.id);

	return [
		currentCategoryTitle,
		selectedSortingMode,
		currentSearchTerm,
		productQ,
		sortingModes,
		formatPrice,
		filterSearch,
		changeSortingMode,
		setCategory,
		showProductEditor,
		click_handler,
		input_input_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5
	];
}

class Products extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Products;