/* src\components\CategoryEditor.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { getContext, onMount } from '../../_snowpack/pkg/svelte.js';
import firebase from '../../_snowpack/pkg/firebase/app.js';
import '../../_snowpack/pkg/firebase/firestore.js';
import '../../_snowpack/pkg/firebase/storage.js';
import InputMask from './InputMask.svelte.js';

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let label;
	let t1;
	let inputmask;
	let updating_value;
	let t2;
	let div1;
	let button;

	let t3_value = (/*isCreating*/ ctx[0]
	? 'Criar Categoria'
	: 'Salvar Alterações') + "";

	let t3;
	let current;
	let mounted;
	let dispose;

	function inputmask_value_binding(value) {
		/*inputmask_value_binding*/ ctx[6](value);
	}

	let inputmask_props = {
		type: "text",
		name: "title",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*categoryNameOptions*/ ctx[3]
	};

	if (/*values*/ ctx[2].title !== void 0) {
		inputmask_props.value = /*values*/ ctx[2].title;
	}

	inputmask = new InputMask({ props: inputmask_props });
	binding_callbacks.push(() => bind(inputmask, 'value', inputmask_value_binding));

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			label = element("label");
			label.textContent = "Título";
			t1 = space();
			create_component(inputmask.$$.fragment);
			t2 = space();
			div1 = element("div");
			button = element("button");
			t3 = text(t3_value);
			attr(label, "for", "title");
			attr(label, "class", "text-xs font-semibold select-none");
			attr(div0, "class", "col-span-full");
			attr(button, "class", "flex items-center justify-center flex-shrink-0 w-full h-full text-sm font-medium text-white rounded bg-main-500 disabled:bg-main-300 hover:bg-main-600 active:bg-main-400");
			button.disabled = /*isBusy*/ ctx[1];
			attr(div1, "class", "h-10 col-span-4 mt-3");
			attr(div2, "class", "grid w-full grid-cols-4 gap-4 px-4 pb-4");
			attr(div3, "class", "flex items-center w-full pt-8");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div0, label);
			append(div0, t1);
			mount_component(inputmask, div0, null);
			append(div2, t2);
			append(div2, div1);
			append(div1, button);
			append(button, t3);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*handleSubmit*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const inputmask_changes = {};

			if (!updating_value && dirty & /*values*/ 4) {
				updating_value = true;
				inputmask_changes.value = /*values*/ ctx[2].title;
				add_flush_callback(() => updating_value = false);
			}

			inputmask.$set(inputmask_changes);

			if ((!current || dirty & /*isCreating*/ 1) && t3_value !== (t3_value = (/*isCreating*/ ctx[0]
			? 'Criar Categoria'
			: 'Salvar Alterações') + "")) set_data(t3, t3_value);

			if (!current || dirty & /*isBusy*/ 2) {
				button.disabled = /*isBusy*/ ctx[1];
			}
		},
		i(local) {
			if (current) return;
			transition_in(inputmask.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inputmask.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(inputmask);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { isCreating = false } = $$props;
	let { id } = $$props;
	let isBusy = false;
	let values = { title: '' };
	const categoryNameOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\(\)\[\]\s]+$/ };
	const { close } = getContext('simple-modal');

	onMount(() => {
		const db = firebase.firestore();

		// If we're editing an existing category, fetch its data
		if (!isCreating && id) {
			$$invalidate(1, isBusy = true);

			db.collection('categories').doc(id).get().then(doc => {
				const { title } = doc.data();
				$$invalidate(2, values.title = title, values);
				$$invalidate(1, isBusy = false);
			});
		}

		
	});

	// Helpers
	const handleSubmit = () => {
		const db = firebase.firestore();

		if (values.title === '') {
			alert('Preencha o título da categoria!');
			return;
		}

		$$invalidate(1, isBusy = true);

		if (isCreating) {
			// Get the id of the last created category
			db.collection('categories').orderBy('created_at', 'desc').limit(1).get().then(snapshot => {
				const lastCategory = snapshot.docs[0];
				const lastCategoryId = lastCategory.id;
				const newCategoryId = parseInt(lastCategoryId) + 1;

				// Create a new category document on firestore
				db.collection('categories').doc(newCategoryId.toString()).set({
					title: values.title,
					created_at: firebase.firestore.FieldValue.serverTimestamp()
				}).then(() => {
					close();
				}).catch(err => {
					alert(`Erro ao criar categoria: ${err}`);
					$$invalidate(1, isBusy = false);
				});
			});
		} else {
			// Update the product document on firestore
			db.collection('categories').doc(id).update({ title: values.title }).then(() => {
				close();
			}).catch(err => {
				alert(`Erro ao atualizar categoria: ${err}`);
				$$invalidate(1, isBusy = false);
			});
		}
	};

	function inputmask_value_binding(value) {
		if ($$self.$$.not_equal(values.title, value)) {
			values.title = value;
			$$invalidate(2, values);
		}
	}

	$$self.$$set = $$props => {
		if ('isCreating' in $$props) $$invalidate(0, isCreating = $$props.isCreating);
		if ('id' in $$props) $$invalidate(5, id = $$props.id);
	};

	return [
		isCreating,
		isBusy,
		values,
		categoryNameOptions,
		handleSubmit,
		id,
		inputmask_value_binding
	];
}

class CategoryEditor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { isCreating: 0, id: 5 });
	}
}

export default CategoryEditor;