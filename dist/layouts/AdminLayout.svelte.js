/* src\layouts\AdminLayout.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_store_value,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { getContext } from '../../_snowpack/pkg/svelte.js';
import { Route, navigateTo } from '../../_snowpack/pkg/svelte-router-spa.js';
import firebase from '../../_snowpack/pkg/firebase/app.js';
import '../../_snowpack/pkg/firebase/auth.js';
import Modal from '../../_snowpack/pkg/svelte-simple-modal.js';
import Sidemenu from '../components/Sidemenu.svelte.js';

function create_else_block(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modal_changes = {};

			if (dirty & /*$$scope, currentRoute, params*/ 67) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (29:0) {#if isWaitingForAuth}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (32:2) <Modal>
function create_default_slot(ctx) {
	let div;
	let sidemenu;
	let t;
	let route;
	let current;

	sidemenu = new Sidemenu({
			props: { currentRoute: /*currentRoute*/ ctx[0] }
		});

	route = new Route({
			props: {
				currentRoute: /*currentRoute*/ ctx[0],
				params: /*params*/ ctx[1]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(sidemenu.$$.fragment);
			t = space();
			create_component(route.$$.fragment);
			attr(div, "class", "flex w-screen h-screen overflow-y-hidden");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(sidemenu, div, null);
			append(div, t);
			mount_component(route, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const sidemenu_changes = {};
			if (dirty & /*currentRoute*/ 1) sidemenu_changes.currentRoute = /*currentRoute*/ ctx[0];
			sidemenu.$set(sidemenu_changes);
			const route_changes = {};
			if (dirty & /*currentRoute*/ 1) route_changes.currentRoute = /*currentRoute*/ ctx[0];
			if (dirty & /*params*/ 2) route_changes.params = /*params*/ ctx[1];
			route.$set(route_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sidemenu.$$.fragment, local);
			transition_in(route.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sidemenu.$$.fragment, local);
			transition_out(route.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(sidemenu);
			destroy_component(route);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isWaitingForAuth*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $needsAuthCheck;
	let { currentRoute } = $$props;
	let { params = {} } = $$props;
	let isWaitingForAuth = $needsAuthCheck;
	const { needsAuthCheck } = getContext('app');
	component_subscribe($$self, needsAuthCheck, value => $$invalidate(4, $needsAuthCheck = value));
	const auth = firebase.auth();

	// Auth guard
	auth.onAuthStateChanged(user => {
		if (!user) {
			navigateTo('/login');
		} else {
			$$invalidate(2, isWaitingForAuth = false);
			set_store_value(needsAuthCheck, $needsAuthCheck = false, $needsAuthCheck);
		}
	});

	$$self.$$set = $$props => {
		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
		if ('params' in $$props) $$invalidate(1, params = $$props.params);
	};

	return [currentRoute, params, isWaitingForAuth, needsAuthCheck];
}

class AdminLayout extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { currentRoute: 0, params: 1 });
	}
}

export default AdminLayout;