import './EstimatesEditor.svelte.css.proxy.js';
/* src\pages\admin\EstimatesEditor.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_block,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	outro_and_destroy_block,
	run_all,
	safe_not_equal,
	set_data,
	set_store_value,
	set_style,
	space,
	stop_propagation,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../_snowpack/pkg/svelte/internal.js";

import { getContext, onMount } from '../../../_snowpack/pkg/svelte.js';
import { navigateTo } from '../../../_snowpack/pkg/svelte-router-spa.js';
import firebase from '../../../_snowpack/pkg/firebase/app.js';
import '../../../_snowpack/pkg/firebase/firestore.js';
import { Doc } from '../../../_snowpack/pkg/sveltefire.js';
import InputMask from '../../components/InputMask.svelte.js';
import ProductOrderEditor from '../../components/ProductOrderEditor.svelte.js';
import PaymentConditionsEditor from '../../components/PaymentConditionsEditor.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[63] = list[i];
	child_ctx[64] = list;
	child_ctx[65] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[63] = list[i];
	child_ctx[65] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[63] = list[i];
	child_ctx[65] = i;
	return child_ctx;
}

// (622:6) {#if values.orders.length === 0}
function create_if_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> 
          <span class="font-semibold text-md">Nenhum produto adicionado.</span>`;

			attr(div, "class", "flex flex-col items-center justify-center w-full h-full space-y-3 text-gray-500 col-span-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (632:8) <Doc path={`products/${item.id}`} let:data={product}>
function create_default_slot(ctx) {
	let div4;
	let div1;
	let button;
	let t0;
	let div0;
	let t1;
	let div3;
	let div2;
	let span0;
	let t2_value = /*product*/ ctx[68].name + "";
	let t2;
	let t3;
	let span1;
	let t4_value = /*item*/ ctx[63].ambient + "";
	let t4;
	let t5;
	let span2;
	let t6_value = /*item*/ ctx[63].count + "";
	let t6;
	let t7;
	let t8_value = /*formatPrice*/ ctx[26](/*product*/ ctx[68].price) + "";
	let t8;
	let t9;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[49](/*i*/ ctx[65]);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[50](/*i*/ ctx[65], /*item*/ ctx[63], /*product*/ ctx[68]);
	}

	return {
		c() {
			div4 = element("div");
			div1 = element("div");
			button = element("button");
			button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`;
			t0 = space();
			div0 = element("div");
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			span0 = element("span");
			t2 = text(t2_value);
			t3 = space();
			span1 = element("span");
			t4 = text(t4_value);
			t5 = space();
			span2 = element("span");
			t6 = text(t6_value);
			t7 = text(" x ");
			t8 = text(t8_value);
			t9 = space();
			attr(button, "class", "absolute z-10 flex items-center justify-center bg-red-500 rounded w-7 h-7 top-2 right-2 text-red-50 hover:bg-red-600 active:bg-red-400");
			attr(button, "title", "Excluir");
			attr(div0, "class", "w-full h-full bg-center bg-no-repeat bg-contain product-image svelte-ayohyr");
			set_style(div0, "background-image", "url(" + /*product*/ ctx[68].image + ")");
			attr(div1, "class", "relative block h-64 overflow-hidden bg-white rounded-lg shadow-md cursor-pointer");
			attr(span0, "class", "font-medium");
			attr(span1, "class", "text-xs font-medium text-main-500");
			attr(div2, "class", "flex flex-col");
			attr(span2, "class", "flex items-center h-8 px-2 ml-1 text-sm rounded text-main-600 bg-main-200 whitespace-nowrap");
			attr(div3, "class", "flex items-center justify-between mt-3");
			attr(div4, "class", "product");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div1);
			append(div1, button);
			append(div1, t0);
			append(div1, div0);
			append(div4, t1);
			append(div4, div3);
			append(div3, div2);
			append(div2, span0);
			append(span0, t2);
			append(div2, t3);
			append(div2, span1);
			append(span1, t4);
			append(div3, t5);
			append(div3, span2);
			append(span2, t6);
			append(span2, t7);
			append(span2, t8);
			insert(target, t9, anchor);

			if (!mounted) {
				dispose = [
					listen(button, "click", stop_propagation(click_handler_1)),
					listen(div1, "click", click_handler_2)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[2] & /*product*/ 64) {
				set_style(div0, "background-image", "url(" + /*product*/ ctx[68].image + ")");
			}

			if (dirty[2] & /*product*/ 64 && t2_value !== (t2_value = /*product*/ ctx[68].name + "")) set_data(t2, t2_value);
			if (dirty[0] & /*values*/ 1 && t4_value !== (t4_value = /*item*/ ctx[63].ambient + "")) set_data(t4, t4_value);
			if (dirty[0] & /*values*/ 1 && t6_value !== (t6_value = /*item*/ ctx[63].count + "")) set_data(t6, t6_value);
			if (dirty[2] & /*product*/ 64 && t8_value !== (t8_value = /*formatPrice*/ ctx[26](/*product*/ ctx[68].price) + "")) set_data(t8, t8_value);
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (detaching) detach(t9);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (631:6) {#each values.orders as item, i (i)}
function create_each_block_2(key_1, ctx) {
	let first;
	let doc;
	let current;

	doc = new Doc({
			props: {
				path: `products/${/*item*/ ctx[63].id}`,
				$$slots: {
					default: [
						create_default_slot,
						({ data: product }) => ({ 68: product }),
						({ data: product }) => [0, 0, product ? 64 : 0]
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(doc.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(doc, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const doc_changes = {};
			if (dirty[0] & /*values*/ 1) doc_changes.path = `products/${/*item*/ ctx[63].id}`;

			if (dirty[0] & /*values*/ 1 | dirty[2] & /*$$scope, product*/ 192) {
				doc_changes.$$scope = { dirty, ctx };
			}

			doc.$set(doc_changes);
		},
		i(local) {
			if (current) return;
			transition_in(doc.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(doc.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(doc, detaching);
		}
	};
}

// (709:6) {#if values.paymentConditions.length === 0}
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> 
          <span class="font-semibold text-md">Nenhuma condição de pagamento.</span>`;

			attr(div, "class", "flex flex-col items-center justify-center w-full h-full space-y-3 text-gray-500 col-span-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (720:6) {#each values.paymentConditions as item, i (i)}
function create_each_block_1(key_1, ctx) {
	let div1;
	let span;
	let t0;
	let t1_value = /*i*/ ctx[65] + 1 + "";
	let t1;
	let t2;
	let div0;
	let button0;
	let t3;
	let button1;
	let t4;
	let mounted;
	let dispose;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[53](/*i*/ ctx[65], /*item*/ ctx[63]);
	}

	function click_handler_5() {
		return /*click_handler_5*/ ctx[54](/*i*/ ctx[65]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text("Linha ");
			t1 = text(t1_value);
			t2 = space();
			div0 = element("div");
			button0 = element("button");
			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>`;
			t3 = space();
			button1 = element("button");
			button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>`;
			t4 = space();
			attr(span, "class", "text-sm");
			attr(button0, "title", "Editar");
			attr(button0, "class", "flex items-center justify-center p-2 text-blue-500 rounded hover:bg-blue-200 active:bg-blue-100");
			attr(button1, "title", "Excluir");
			attr(button1, "class", "flex items-center justify-center p-2 text-red-500 rounded hover:bg-red-200 active:bg-red-100");
			attr(div0, "class", "flex ml-auto");
			attr(div1, "class", "flex items-center w-full px-2 odd:bg-gray-100");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(span, t1);
			append(div1, t2);
			append(div1, div0);
			append(div0, button0);
			append(div0, t3);
			append(div0, button1);
			append(div1, t4);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler_4),
					listen(button1, "click", click_handler_5)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*values*/ 1 && t1_value !== (t1_value = /*i*/ ctx[65] + 1 + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (775:6) {#if values.observations.length === 0}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> 
          <span class="font-semibold text-md">Nenhuma observação.</span>`;

			attr(div, "class", "flex flex-col items-center justify-center w-full h-full space-y-3 text-gray-500 col-span-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (786:6) {#each values.observations as item, i (i)}
function create_each_block(key_1, ctx) {
	let div1;
	let inputmask;
	let updating_value;
	let t0;
	let div0;
	let button;
	let t1;
	let current;
	let mounted;
	let dispose;

	function inputmask_value_binding(value) {
		/*inputmask_value_binding*/ ctx[56](value, /*item*/ ctx[63]);
	}

	let inputmask_props = {
		type: "text",
		name: "title",
		class: "flex items-center w-full h-10 px-4 mr-2 text-sm border-2 rounded",
		placeholder: "Digite uma observação...",
		unmask: "typed",
		imask: /*observationOptions*/ ctx[21]
	};

	if (/*item*/ ctx[63].value !== void 0) {
		inputmask_props.value = /*item*/ ctx[63].value;
	}

	inputmask = new InputMask({ props: inputmask_props });
	binding_callbacks.push(() => bind(inputmask, 'value', inputmask_value_binding));

	function click_handler_7() {
		return /*click_handler_7*/ ctx[57](/*i*/ ctx[65]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			create_component(inputmask.$$.fragment);
			t0 = space();
			div0 = element("div");
			button = element("button");
			button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>`;
			t1 = space();
			attr(button, "title", "Excluir");
			attr(button, "class", "flex items-center justify-center p-2 text-red-500 rounded hover:bg-red-200 active:bg-red-100");
			attr(div0, "class", "flex ml-auto");
			attr(div1, "class", "flex items-center w-full");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(inputmask, div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, button);
			append(div1, t1);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler_7);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const inputmask_changes = {};

			if (!updating_value && dirty[0] & /*values*/ 1) {
				updating_value = true;
				inputmask_changes.value = /*item*/ ctx[63].value;
				add_flush_callback(() => updating_value = false);
			}

			inputmask.$set(inputmask_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inputmask.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inputmask.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(inputmask);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let t0;
	let div28;
	let h1;
	let t3;
	let div9;
	let h20;
	let t5;
	let div0;
	let label0;
	let t7;
	let inputmask0;
	let updating_value;
	let t8;
	let h21;
	let t10;
	let div1;
	let label1;
	let t12;
	let inputmask1;
	let updating_value_1;
	let t13;
	let div2;
	let label2;
	let t15;
	let inputmask2;
	let updating_value_2;
	let t16;
	let div3;
	let label3;
	let t18;
	let inputmask3;
	let updating_value_3;
	let t19;
	let div4;
	let label4;
	let t21;
	let inputmask4;
	let updating_value_4;
	let t22;
	let div5;
	let label5;
	let t24;
	let inputmask5;
	let updating_value_5;
	let t25;
	let div6;
	let label6;
	let t27;
	let inputmask6;
	let updating_value_6;
	let t28;
	let div7;
	let label7;
	let t30;
	let inputmask7;
	let updating_value_7;
	let t31;
	let div8;
	let label8;
	let t33;
	let inputmask8;
	let updating_value_8;
	let t34;
	let div11;
	let h22;
	let t36;
	let div10;
	let label9;
	let t38;
	let inputmask9;
	let updating_value_9;
	let t39;
	let div15;
	let div13;
	let h23;
	let t41;
	let button0;
	let t44;
	let div14;
	let t45;
	let each_blocks_2 = [];
	let each0_lookup = new Map();
	let t46;
	let div18;
	let div17;
	let h24;
	let t48;
	let div16;
	let span1;
	let t50;
	let inputmask10;
	let updating_value_10;
	let t51;
	let div22;
	let div20;
	let h25;
	let t53;
	let button1;
	let t56;
	let div21;
	let t57;
	let each_blocks_1 = [];
	let each1_lookup = new Map();
	let t58;
	let div26;
	let div24;
	let h26;
	let t60;
	let button2;
	let t63;
	let div25;
	let t64;
	let each_blocks = [];
	let each2_lookup = new Map();
	let t65;
	let div27;
	let button3;
	let current;
	let mounted;
	let dispose;

	function inputmask0_value_binding(value) {
		/*inputmask0_value_binding*/ ctx[38](value);
	}

	let inputmask0_props = {
		type: "text",
		name: "clientName",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientNameOptions*/ ctx[10]
	};

	if (/*values*/ ctx[0].clientName !== void 0) {
		inputmask0_props.value = /*values*/ ctx[0].clientName;
	}

	inputmask0 = new InputMask({ props: inputmask0_props });
	binding_callbacks.push(() => bind(inputmask0, 'value', inputmask0_value_binding));

	function inputmask1_value_binding(value) {
		/*inputmask1_value_binding*/ ctx[39](value);
	}

	let inputmask1_props = {
		type: "text",
		name: "clientAddressZipCode",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: true,
		imask: /*clientAddressZipCodeOptions*/ ctx[17]
	};

	if (/*values*/ ctx[0].clientAddressZipCode !== void 0) {
		inputmask1_props.value = /*values*/ ctx[0].clientAddressZipCode;
	}

	inputmask1 = new InputMask({ props: inputmask1_props });
	binding_callbacks.push(() => bind(inputmask1, 'value', inputmask1_value_binding));

	function inputmask2_value_binding(value) {
		/*inputmask2_value_binding*/ ctx[40](value);
	}

	let inputmask2_props = {
		type: "text",
		name: "clientAddressStreet",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressStreetOptions*/ ctx[11]
	};

	if (/*values*/ ctx[0].clientAddressStreet !== void 0) {
		inputmask2_props.value = /*values*/ ctx[0].clientAddressStreet;
	}

	inputmask2 = new InputMask({ props: inputmask2_props });
	binding_callbacks.push(() => bind(inputmask2, 'value', inputmask2_value_binding));

	function inputmask3_value_binding(value) {
		/*inputmask3_value_binding*/ ctx[41](value);
	}

	let inputmask3_props = {
		type: "text",
		name: "clientAddressStreet",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressNumberOptions*/ ctx[12]
	};

	if (/*values*/ ctx[0].clientAddressNumber !== void 0) {
		inputmask3_props.value = /*values*/ ctx[0].clientAddressNumber;
	}

	inputmask3 = new InputMask({ props: inputmask3_props });
	binding_callbacks.push(() => bind(inputmask3, 'value', inputmask3_value_binding));

	function inputmask4_value_binding(value) {
		/*inputmask4_value_binding*/ ctx[42](value);
	}

	let inputmask4_props = {
		type: "text",
		name: "clientAddressComplement",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressComplementOptions*/ ctx[13]
	};

	if (/*values*/ ctx[0].clientAddressComplement !== void 0) {
		inputmask4_props.value = /*values*/ ctx[0].clientAddressComplement;
	}

	inputmask4 = new InputMask({ props: inputmask4_props });
	binding_callbacks.push(() => bind(inputmask4, 'value', inputmask4_value_binding));

	function inputmask5_value_binding(value) {
		/*inputmask5_value_binding*/ ctx[43](value);
	}

	let inputmask5_props = {
		type: "text",
		name: "clientAddressNeighborhood",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressNeighborhoodOptions*/ ctx[14]
	};

	if (/*values*/ ctx[0].clientAddressNeighborhood !== void 0) {
		inputmask5_props.value = /*values*/ ctx[0].clientAddressNeighborhood;
	}

	inputmask5 = new InputMask({ props: inputmask5_props });
	binding_callbacks.push(() => bind(inputmask5, 'value', inputmask5_value_binding));

	function inputmask6_value_binding(value) {
		/*inputmask6_value_binding*/ ctx[44](value);
	}

	let inputmask6_props = {
		type: "text",
		name: "clientAddressCity",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressCityOptions*/ ctx[15]
	};

	if (/*values*/ ctx[0].clientAddressCity !== void 0) {
		inputmask6_props.value = /*values*/ ctx[0].clientAddressCity;
	}

	inputmask6 = new InputMask({ props: inputmask6_props });
	binding_callbacks.push(() => bind(inputmask6, 'value', inputmask6_value_binding));

	function inputmask7_value_binding(value) {
		/*inputmask7_value_binding*/ ctx[45](value);
	}

	let inputmask7_props = {
		type: "text",
		name: "clientAddressState",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressStateOptions*/ ctx[16]
	};

	if (/*values*/ ctx[0].clientAddressState !== void 0) {
		inputmask7_props.value = /*values*/ ctx[0].clientAddressState;
	}

	inputmask7 = new InputMask({ props: inputmask7_props });
	binding_callbacks.push(() => bind(inputmask7, 'value', inputmask7_value_binding));

	function inputmask8_value_binding(value) {
		/*inputmask8_value_binding*/ ctx[46](value);
	}

	let inputmask8_props = {
		type: "text",
		name: "clientAddressReference",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*clientAddressReferenceOptions*/ ctx[18]
	};

	if (/*values*/ ctx[0].clientAddressReference !== void 0) {
		inputmask8_props.value = /*values*/ ctx[0].clientAddressReference;
	}

	inputmask8 = new InputMask({ props: inputmask8_props });
	binding_callbacks.push(() => bind(inputmask8, 'value', inputmask8_value_binding));

	function inputmask9_value_binding(value) {
		/*inputmask9_value_binding*/ ctx[47](value);
	}

	let inputmask9_props = {
		type: "text",
		name: "professionalName",
		class: "flex items-center w-full h-10 px-4 mt-1 text-sm border-2 rounded",
		unmask: "typed",
		imask: /*professionalNameOptions*/ ctx[19]
	};

	if (/*values*/ ctx[0].professional !== void 0) {
		inputmask9_props.value = /*values*/ ctx[0].professional;
	}

	inputmask9 = new InputMask({ props: inputmask9_props });
	binding_callbacks.push(() => bind(inputmask9, 'value', inputmask9_value_binding));
	let if_block0 = /*values*/ ctx[0].orders.length === 0 && create_if_block_2(ctx);
	let each_value_2 = /*values*/ ctx[0].orders;
	const get_key = ctx => /*i*/ ctx[65];

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_2[i] = create_each_block_2(key, child_ctx));
	}

	function inputmask10_value_binding(value) {
		/*inputmask10_value_binding*/ ctx[51](value);
	}

	let inputmask10_props = {
		type: "text",
		name: "totalPrice",
		class: "w-full py-6 focus:outline-none",
		unmask: "typed",
		imask: /*totalPriceOptions*/ ctx[20]
	};

	if (/*values*/ ctx[0].totalPrice !== void 0) {
		inputmask10_props.value = /*values*/ ctx[0].totalPrice;
	}

	inputmask10 = new InputMask({ props: inputmask10_props });
	binding_callbacks.push(() => bind(inputmask10, 'value', inputmask10_value_binding));
	let if_block1 = /*values*/ ctx[0].paymentConditions.length === 0 && create_if_block_1(ctx);
	let each_value_1 = /*values*/ ctx[0].paymentConditions;
	const get_key_1 = ctx => /*i*/ ctx[65];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
	}

	let if_block2 = /*values*/ ctx[0].observations.length === 0 && create_if_block(ctx);
	let each_value = /*values*/ ctx[0].observations;
	const get_key_2 = ctx => /*i*/ ctx[65];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key_2(child_ctx);
		each2_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			t0 = space();
			div28 = element("div");
			h1 = element("h1");
			h1.textContent = `${/*isCreating*/ ctx[9] ? 'Novo' : 'Editar'} Orçamento`;
			t3 = space();
			div9 = element("div");
			h20 = element("h2");
			h20.textContent = "Cliente";
			t5 = space();
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Nome Completo";
			t7 = space();
			create_component(inputmask0.$$.fragment);
			t8 = space();
			h21 = element("h2");
			h21.textContent = "Endereço";
			t10 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "CEP";
			t12 = space();
			create_component(inputmask1.$$.fragment);
			t13 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "Logradouro";
			t15 = space();
			create_component(inputmask2.$$.fragment);
			t16 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = "Número";
			t18 = space();
			create_component(inputmask3.$$.fragment);
			t19 = space();
			div4 = element("div");
			label4 = element("label");
			label4.textContent = "Complemento";
			t21 = space();
			create_component(inputmask4.$$.fragment);
			t22 = space();
			div5 = element("div");
			label5 = element("label");
			label5.textContent = "Bairro / Município";
			t24 = space();
			create_component(inputmask5.$$.fragment);
			t25 = space();
			div6 = element("div");
			label6 = element("label");
			label6.textContent = "Cidade";
			t27 = space();
			create_component(inputmask6.$$.fragment);
			t28 = space();
			div7 = element("div");
			label7 = element("label");
			label7.textContent = "Estado";
			t30 = space();
			create_component(inputmask7.$$.fragment);
			t31 = space();
			div8 = element("div");
			label8 = element("label");
			label8.textContent = "Ponto de Referência";
			t33 = space();
			create_component(inputmask8.$$.fragment);
			t34 = space();
			div11 = element("div");
			h22 = element("h2");
			h22.textContent = "Profissional";
			t36 = space();
			div10 = element("div");
			label9 = element("label");
			label9.textContent = "Nome Completo";
			t38 = space();
			create_component(inputmask9.$$.fragment);
			t39 = space();
			div15 = element("div");
			div13 = element("div");
			h23 = element("h2");
			h23.textContent = "Produtos";
			t41 = space();
			button0 = element("button");

			button0.innerHTML = `<div class="flex items-center justify-center w-10 h-10 px-3 text-gray-100 rounded-full bg-main-500 md:justify-start md:rounded lg:justify-between md:w-40 hover:bg-main-600 active:bg-main-400 whitespace-nowrap"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
          <span class="hidden w-full font-medium text-center md:block">Adicionar</span></div>`;

			t44 = space();
			div14 = element("div");
			if (if_block0) if_block0.c();
			t45 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t46 = space();
			div18 = element("div");
			div17 = element("div");
			h24 = element("h2");
			h24.textContent = "Valor Final:";
			t48 = space();
			div16 = element("div");
			span1 = element("span");
			span1.textContent = "R$";
			t50 = space();
			create_component(inputmask10.$$.fragment);
			t51 = space();
			div22 = element("div");
			div20 = element("div");
			h25 = element("h2");
			h25.textContent = "Condições de Pagamento";
			t53 = space();
			button1 = element("button");

			button1.innerHTML = `<div class="flex items-center justify-center w-10 h-10 px-3 text-gray-100 rounded-full bg-main-500 md:justify-start md:rounded lg:justify-between md:w-40 hover:bg-main-600 active:bg-main-400 whitespace-nowrap"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
          <span class="hidden w-full font-medium text-center md:block">Adicionar</span></div>`;

			t56 = space();
			div21 = element("div");
			if (if_block1) if_block1.c();
			t57 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t58 = space();
			div26 = element("div");
			div24 = element("div");
			h26 = element("h2");
			h26.textContent = "Observações";
			t60 = space();
			button2 = element("button");

			button2.innerHTML = `<div class="flex items-center justify-center w-10 h-10 px-3 text-gray-100 rounded-full bg-main-500 md:justify-start md:rounded lg:justify-between md:w-40 hover:bg-main-600 active:bg-main-400 whitespace-nowrap"><svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-5 h-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg> 
          <span class="hidden w-full font-medium text-center md:block">Adicionar</span></div>`;

			t63 = space();
			div25 = element("div");
			if (if_block2) if_block2.c();
			t64 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t65 = space();
			div27 = element("div");
			button3 = element("button");

			button3.textContent = `${/*isCreating*/ ctx[9]
			? 'Criar Orçamento'
			: 'Salvar Alterações'}`;

			document.title = "Admin - Editor de Orçamento";
			attr(h1, "class", "text-3xl");
			attr(h20, "class", "text-xl col-span-full");
			attr(label0, "for", "clientName");
			attr(label0, "class", "label svelte-ayohyr");
			attr(div0, "class", "col-span-full");
			attr(h21, "class", "mt-3 text-xl col-span-full");
			attr(label1, "for", "clientAddressZipCode");
			attr(label1, "class", "label svelte-ayohyr");
			attr(div1, "class", "col-span-full md:col-span-2 lg:col-span-1");
			attr(label2, "for", "clientAddressStreet");
			attr(label2, "class", "label svelte-ayohyr");
			attr(div2, "class", "col-span-full md:col-span-4 lg:col-span-5");
			attr(label3, "for", "clientAddressNumber");
			attr(label3, "class", "label svelte-ayohyr");
			attr(div3, "class", "col-span-full md:col-span-3 lg:col-span-1");
			attr(label4, "for", "clientAddressComplement");
			attr(label4, "class", "label svelte-ayohyr");
			attr(div4, "class", "col-span-full md:col-span-3 lg:col-span-2");
			attr(label5, "for", "clientAddressNeighborhood");
			attr(label5, "class", "label svelte-ayohyr");
			attr(div5, "class", "col-span-full md:col-span-3 lg:col-span-3");
			attr(label6, "for", "clientAddressCity");
			attr(label6, "class", "label svelte-ayohyr");
			attr(div6, "class", "col-span-full md:col-span-3 lg:col-span-3");
			attr(label7, "for", "clientAddressState");
			attr(label7, "class", "label svelte-ayohyr");
			attr(div7, "class", "col-span-full lg:col-span-3");
			attr(label8, "for", "clientAddressReference");
			attr(label8, "class", "label svelte-ayohyr");
			attr(div8, "class", "col-span-full");
			attr(div9, "class", "grid w-full grid-cols-6 gap-4 p-3 py-5 mt-6 bg-white rounded-lg shadow-md md:p-6");
			attr(h22, "class", "text-xl col-span-full");
			attr(label9, "for", "professionalName");
			attr(label9, "class", "label svelte-ayohyr");
			attr(div10, "class", "col-span-full");
			attr(div11, "class", "grid w-full grid-cols-6 gap-4 p-3 py-5 mt-5 bg-white rounded-lg shadow-md md:p-6");
			attr(h23, "class", "text-xl");
			attr(button0, "class", "relative ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div13, "class", "flex items-center justify-between w-full");
			attr(div14, "class", "grid w-full grid-cols-1 gap-6 mt-3 2xl:grid-cols-5 xl:grid-cols-4 lg:grid-cols-3 sm:grid-cols-2 lg:gap-y-8");
			attr(div15, "class", "flex flex-col w-auto gap-4 p-3 py-5 mt-5 bg-white rounded-lg shadow-md md:p-6");
			attr(h24, "class", "text-xl");
			attr(span1, "class", "select-none");
			attr(div16, "class", "border-box flex mt-3 md:mt-0 items-center h-10 gap-2 px-4 py-6 overflow-hidden text-xl border-2 rounded focus-within:border-black focus-within:border-2 focus-within:px-[16px]");
			attr(div17, "class", "flex flex-col w-full md:items-center md:justify-between md:flex-row");
			attr(div18, "class", "flex flex-col w-auto gap-4 p-3 py-5 mt-5 bg-white rounded-lg shadow-md md:p-6");
			attr(h25, "class", "text-xl");
			attr(button1, "class", "relative ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div20, "class", "flex items-center justify-between w-full");
			attr(div21, "class", "flex flex-col w-full space-y-1");
			attr(div22, "class", "flex flex-col w-full gap-4 p-3 py-5 mt-5 bg-white rounded-lg shadow-md md:p-6");
			attr(h26, "class", "text-xl");
			attr(button2, "class", "relative ml-auto text-sm lg:w-auto focus:outline-none sm:mt-0");
			attr(div24, "class", "flex items-center justify-between w-full");
			attr(div25, "class", "flex flex-col space-y-1 col-span-full");
			attr(div26, "class", "flex flex-col w-full gap-4 p-3 py-5 mt-5 bg-white rounded-lg shadow-md md:p-6");
			attr(button3, "class", "flex items-center justify-center flex-shrink-0 w-full h-10 text-sm font-medium text-white rounded bg-main-500 disabled:bg-main-200 hover:bg-main-600 active:bg-main-400");
			attr(div27, "class", "h-auto mt-6 mb-32");
			attr(div28, "class", "flex flex-col w-screen min-h-screen p-4 pt-8 overflow-y-scroll text-gray-800 bg-gray-100 md:p-8");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div28, anchor);
			append(div28, h1);
			append(div28, t3);
			append(div28, div9);
			append(div9, h20);
			append(div9, t5);
			append(div9, div0);
			append(div0, label0);
			append(div0, t7);
			mount_component(inputmask0, div0, null);
			append(div9, t8);
			append(div9, h21);
			append(div9, t10);
			append(div9, div1);
			append(div1, label1);
			append(div1, t12);
			mount_component(inputmask1, div1, null);
			append(div9, t13);
			append(div9, div2);
			append(div2, label2);
			append(div2, t15);
			mount_component(inputmask2, div2, null);
			append(div9, t16);
			append(div9, div3);
			append(div3, label3);
			append(div3, t18);
			mount_component(inputmask3, div3, null);
			append(div9, t19);
			append(div9, div4);
			append(div4, label4);
			append(div4, t21);
			mount_component(inputmask4, div4, null);
			append(div9, t22);
			append(div9, div5);
			append(div5, label5);
			append(div5, t24);
			mount_component(inputmask5, div5, null);
			append(div9, t25);
			append(div9, div6);
			append(div6, label6);
			append(div6, t27);
			mount_component(inputmask6, div6, null);
			append(div9, t28);
			append(div9, div7);
			append(div7, label7);
			append(div7, t30);
			mount_component(inputmask7, div7, null);
			append(div9, t31);
			append(div9, div8);
			append(div8, label8);
			append(div8, t33);
			mount_component(inputmask8, div8, null);
			append(div28, t34);
			append(div28, div11);
			append(div11, h22);
			append(div11, t36);
			append(div11, div10);
			append(div10, label9);
			append(div10, t38);
			mount_component(inputmask9, div10, null);
			append(div28, t39);
			append(div28, div15);
			append(div15, div13);
			append(div13, h23);
			append(div13, t41);
			append(div13, button0);
			append(div15, t44);
			append(div15, div14);
			if (if_block0) if_block0.m(div14, null);
			append(div14, t45);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div14, null);
			}

			append(div28, t46);
			append(div28, div18);
			append(div18, div17);
			append(div17, h24);
			append(div17, t48);
			append(div17, div16);
			append(div16, span1);
			append(div16, t50);
			mount_component(inputmask10, div16, null);
			append(div28, t51);
			append(div28, div22);
			append(div22, div20);
			append(div20, h25);
			append(div20, t53);
			append(div20, button1);
			append(div22, t56);
			append(div22, div21);
			if (if_block1) if_block1.m(div21, null);
			append(div21, t57);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div21, null);
			}

			append(div28, t58);
			append(div28, div26);
			append(div26, div24);
			append(div24, h26);
			append(div24, t60);
			append(div24, button2);
			append(div26, t63);
			append(div26, div25);
			if (if_block2) if_block2.m(div25, null);
			append(div25, t64);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div25, null);
			}

			append(div28, t65);
			append(div28, div27);
			append(div27, button3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[48]),
					listen(button1, "click", /*click_handler_3*/ ctx[52]),
					listen(button2, "click", /*click_handler_6*/ ctx[55]),
					listen(button3, "click", /*click_handler_8*/ ctx[58])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const inputmask0_changes = {};

			if (!updating_value && dirty[0] & /*values*/ 1) {
				updating_value = true;
				inputmask0_changes.value = /*values*/ ctx[0].clientName;
				add_flush_callback(() => updating_value = false);
			}

			inputmask0.$set(inputmask0_changes);
			const inputmask1_changes = {};

			if (!updating_value_1 && dirty[0] & /*values*/ 1) {
				updating_value_1 = true;
				inputmask1_changes.value = /*values*/ ctx[0].clientAddressZipCode;
				add_flush_callback(() => updating_value_1 = false);
			}

			inputmask1.$set(inputmask1_changes);
			const inputmask2_changes = {};

			if (!updating_value_2 && dirty[0] & /*values*/ 1) {
				updating_value_2 = true;
				inputmask2_changes.value = /*values*/ ctx[0].clientAddressStreet;
				add_flush_callback(() => updating_value_2 = false);
			}

			inputmask2.$set(inputmask2_changes);
			const inputmask3_changes = {};

			if (!updating_value_3 && dirty[0] & /*values*/ 1) {
				updating_value_3 = true;
				inputmask3_changes.value = /*values*/ ctx[0].clientAddressNumber;
				add_flush_callback(() => updating_value_3 = false);
			}

			inputmask3.$set(inputmask3_changes);
			const inputmask4_changes = {};

			if (!updating_value_4 && dirty[0] & /*values*/ 1) {
				updating_value_4 = true;
				inputmask4_changes.value = /*values*/ ctx[0].clientAddressComplement;
				add_flush_callback(() => updating_value_4 = false);
			}

			inputmask4.$set(inputmask4_changes);
			const inputmask5_changes = {};

			if (!updating_value_5 && dirty[0] & /*values*/ 1) {
				updating_value_5 = true;
				inputmask5_changes.value = /*values*/ ctx[0].clientAddressNeighborhood;
				add_flush_callback(() => updating_value_5 = false);
			}

			inputmask5.$set(inputmask5_changes);
			const inputmask6_changes = {};

			if (!updating_value_6 && dirty[0] & /*values*/ 1) {
				updating_value_6 = true;
				inputmask6_changes.value = /*values*/ ctx[0].clientAddressCity;
				add_flush_callback(() => updating_value_6 = false);
			}

			inputmask6.$set(inputmask6_changes);
			const inputmask7_changes = {};

			if (!updating_value_7 && dirty[0] & /*values*/ 1) {
				updating_value_7 = true;
				inputmask7_changes.value = /*values*/ ctx[0].clientAddressState;
				add_flush_callback(() => updating_value_7 = false);
			}

			inputmask7.$set(inputmask7_changes);
			const inputmask8_changes = {};

			if (!updating_value_8 && dirty[0] & /*values*/ 1) {
				updating_value_8 = true;
				inputmask8_changes.value = /*values*/ ctx[0].clientAddressReference;
				add_flush_callback(() => updating_value_8 = false);
			}

			inputmask8.$set(inputmask8_changes);
			const inputmask9_changes = {};

			if (!updating_value_9 && dirty[0] & /*values*/ 1) {
				updating_value_9 = true;
				inputmask9_changes.value = /*values*/ ctx[0].professional;
				add_flush_callback(() => updating_value_9 = false);
			}

			inputmask9.$set(inputmask9_changes);

			if (/*values*/ ctx[0].orders.length === 0) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div14, t45);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*values, formatPrice, showProductOrderEditor, deleteProductOrder*/ 205520897 | dirty[2] & /*product*/ 64) {
				each_value_2 = /*values*/ ctx[0].orders;
				group_outros();
				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key, 1, ctx, each_value_2, each0_lookup, div14, outro_and_destroy_block, create_each_block_2, null, get_each_context_2);
				check_outros();
			}

			const inputmask10_changes = {};

			if (!updating_value_10 && dirty[0] & /*values*/ 1) {
				updating_value_10 = true;
				inputmask10_changes.value = /*values*/ ctx[0].totalPrice;
				add_flush_callback(() => updating_value_10 = false);
			}

			inputmask10.$set(inputmask10_changes);

			if (/*values*/ ctx[0].paymentConditions.length === 0) {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div21, t57);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*deletePaymentConditionsLine, values, showPaymentConditionsEditor*/ 276824065) {
				each_value_1 = /*values*/ ctx[0].paymentConditions;
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_1, 1, ctx, each_value_1, each1_lookup, div21, destroy_block, create_each_block_1, null, get_each_context_1);
			}

			if (/*values*/ ctx[0].observations.length === 0) {
				if (if_block2) {
					
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div25, t64);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*values, observationOptions*/ 2097153) {
				each_value = /*values*/ ctx[0].observations;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, each_value, each2_lookup, div25, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(inputmask0.$$.fragment, local);
			transition_in(inputmask1.$$.fragment, local);
			transition_in(inputmask2.$$.fragment, local);
			transition_in(inputmask3.$$.fragment, local);
			transition_in(inputmask4.$$.fragment, local);
			transition_in(inputmask5.$$.fragment, local);
			transition_in(inputmask6.$$.fragment, local);
			transition_in(inputmask7.$$.fragment, local);
			transition_in(inputmask8.$$.fragment, local);
			transition_in(inputmask9.$$.fragment, local);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks_2[i]);
			}

			transition_in(inputmask10.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(inputmask0.$$.fragment, local);
			transition_out(inputmask1.$$.fragment, local);
			transition_out(inputmask2.$$.fragment, local);
			transition_out(inputmask3.$$.fragment, local);
			transition_out(inputmask4.$$.fragment, local);
			transition_out(inputmask5.$$.fragment, local);
			transition_out(inputmask6.$$.fragment, local);
			transition_out(inputmask7.$$.fragment, local);
			transition_out(inputmask8.$$.fragment, local);
			transition_out(inputmask9.$$.fragment, local);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				transition_out(each_blocks_2[i]);
			}

			transition_out(inputmask10.$$.fragment, local);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div28);
			destroy_component(inputmask0);
			destroy_component(inputmask1);
			destroy_component(inputmask2);
			destroy_component(inputmask3);
			destroy_component(inputmask4);
			destroy_component(inputmask5);
			destroy_component(inputmask6);
			destroy_component(inputmask7);
			destroy_component(inputmask8);
			destroy_component(inputmask9);
			if (if_block0) if_block0.d();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].d();
			}

			destroy_component(inputmask10);
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			if (if_block2) if_block2.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $newPaymentConditionInfo;
	let $paymentConditionEditIndex;
	let $newOrderInfo;
	let $orderEditIndex;
	let $paymentConditionEditReady;
	let $newPaymentConditionReady;
	let $orderEditReady;
	let $newOrderReady;
	const urlSearchParams = new URLSearchParams(window.location.search);
	const params = Object.fromEntries(urlSearchParams.entries());
	const newOrderInfo = getContext('newOrderInfo');
	component_subscribe($$self, newOrderInfo, value => $$invalidate(32, $newOrderInfo = value));
	const newOrderReady = getContext('newOrderReady');
	component_subscribe($$self, newOrderReady, value => $$invalidate(37, $newOrderReady = value));
	const orderEditReady = getContext('orderEditReady');
	component_subscribe($$self, orderEditReady, value => $$invalidate(36, $orderEditReady = value));
	const orderEditIndex = getContext('orderEditIndex');
	component_subscribe($$self, orderEditIndex, value => $$invalidate(33, $orderEditIndex = value));
	const newPaymentConditionInfo = getContext('newPaymentConditionInfo');
	component_subscribe($$self, newPaymentConditionInfo, value => $$invalidate(30, $newPaymentConditionInfo = value));
	const newPaymentConditionReady = getContext('newPaymentConditionReady');
	component_subscribe($$self, newPaymentConditionReady, value => $$invalidate(35, $newPaymentConditionReady = value));
	const paymentConditionEditReady = getContext('paymentConditionEditReady');
	component_subscribe($$self, paymentConditionEditReady, value => $$invalidate(34, $paymentConditionEditReady = value));
	const paymentConditionEditIndex = getContext('paymentConditionEditIndex');
	component_subscribe($$self, paymentConditionEditIndex, value => $$invalidate(31, $paymentConditionEditIndex = value));
	let isCreating = params.id === undefined;

	let values = {
		createdAt: null,
		clientName: '',
		clientAddressStreet: '',
		clientAddressNumber: '',
		clientAddressComplement: '',
		clientAddressNeighborhood: '',
		clientAddressCity: '',
		clientAddressState: '',
		clientAddressZipCode: '',
		clientAddressReference: '',
		professional: '',
		orders: [],
		totalPrice: 0,
		paymentConditions: [],
		observations: []
	};

	// Input masks
	const clientNameOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\s]+$/ };

	const clientAddressStreetOptions = {
		mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\/\(\)\,\.0-9\s]+$/
	};

	const clientAddressNumberOptions = { mask: /^[0-9]+$/ };

	const clientAddressComplementOptions = {
		mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\/\(\)\,\.0-9\s]+$/
	};

	const clientAddressNeighborhoodOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\s]+$/ };
	const clientAddressCityOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\s]+$/ };
	const clientAddressStateOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\s]+$/ };
	const clientAddressZipCodeOptions = { mask: '00000-000', lazy: false };

	const clientAddressReferenceOptions = {
		mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\-\/\(\)\,\.0-9\s]+$/
	};

	const professionalNameOptions = { mask: /^[A-Za-zÀ-ÖØ-öø-ÿ\s]+$/ };

	const totalPriceOptions = {
		mask: Number,
		scale: 2,
		signed: false,
		thousandsSeparator: '.',
		radix: ',',
		mapToRadix: ['.'],
		padFractionalZeros: true,
		normalizeZeros: true,
		min: 0.0,
		max: 9999999.99
	};

	const observationOptions = {
		mask: /^[A-Za-zÀ-ÖØ-öø-ÿ0-9\(\)\-\+\,\.\[\]\!\*\%\=\/\$\;\:\s]+$/
	};

	if (!isCreating) {
		// Load data from firebase
		const db = firebase.firestore();

		db.collection('estimates').doc(params.id).get().then(doc => {
			if (doc.exists) {
				const { client, products, professional, priceTotal, paymentConditions, observations } = doc.data();

				$$invalidate(0, values = {
					clientName: client.name,
					clientAddressStreet: client.address.street,
					clientAddressNumber: client.address.number,
					clientAddressComplement: client.address.complement,
					clientAddressNeighborhood: client.address.neighborhood,
					clientAddressCity: client.address.city,
					clientAddressState: client.address.state,
					clientAddressZipCode: client.address.zipCode,
					clientAddressReference: client.address.reference,
					orders: products,
					totalPrice: priceTotal,
					paymentConditions,
					professional,
					observations
				});
			} else {
				navigateTo('/admin/estimates');
			}
		});
	}

	onMount(() => {
		// If we're creating a new estimate, try to fetch the values from
		// localStorage
		if (isCreating && window.localStorage.length > 0) {
			if (confirm('Dados de um orçamento em rascunho foram encontrados.\r\nDeseja continuar de onde parou?\r\n\r\n(Selecionar "cancelar" irá deletar o rascunho).')) {
				Object.keys(values).forEach(key => {
					const value = window.localStorage.getItem(key);

					if (!!value) {
						$$invalidate(0, values[key] = JSON.parse(value), values);
					}
				});

				handleOrderChange();
			} else {
				// Clear localStorage
				Object.keys(values).forEach(key => {
					window.localStorage.removeItem(key);
				});
			}
		}
	});

	// Helpers
	const { open } = getContext('simple-modal');

	const showProductOrderEditor = (index, item, name, image) => {
		set_store_value(orderEditIndex, $orderEditIndex = index, $orderEditIndex);
		set_store_value(newOrderInfo, $newOrderInfo = { ...item }, $newOrderInfo);

		open(ProductOrderEditor, {
			selectedProduct: { id: item.id, name, image }
		});
	};

	const showPaymentConditionsEditor = (index, item) => {
		set_store_value(paymentConditionEditIndex, $paymentConditionEditIndex = index, $paymentConditionEditIndex);
		set_store_value(newPaymentConditionInfo, $newPaymentConditionInfo = { ...item }, $newPaymentConditionInfo);

		open(PaymentConditionsEditor, {
			selectedPaymentCondition: {
				first: item.first,
				second: item.second,
				third: item.third
			}
		});
	};

	const createNewProductOrder = () => {
		open(ProductOrderEditor, { isNew: true });
	};

	const createNewPaymentCondition = () => {
		open(PaymentConditionsEditor, { isNew: true });
	};

	const formatPrice = price => {
		const formatter = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' });
		return formatter.format(price);
	};

	const handleOrderChange = async () => {
		// Calculate the total price for the order
		let newTotalPrice = 0;

		for (let order of values.orders) {
			// Fetch the price for the product from firebase
			const db = firebase.firestore();

			const doc = await db.collection('products').doc(order.id).get();
			const product = doc.data();
			newTotalPrice += product.price * order.count;
		}

		// Update the total price
		$$invalidate(0, values.totalPrice = newTotalPrice, values);
	};

	const deleteProductOrder = index => {
		if (!confirm('Tem certeza?')) return;
		values.orders.splice(index, 1);
		$$invalidate(0, values = { ...values });
		handleOrderChange();
	};

	const deletePaymentConditionsLine = i => {
		if (!confirm('Tem certeza?')) return;
		values.paymentConditions.splice(i, 1);
		$$invalidate(0, values = { ...values });
	};

	const handleSubmit = () => {
		const db = firebase.firestore();

		if (values.clientName === '') {
			alert('Preencha o nome do cliente!');
			return;
		}

		if (values.clientAddressStreet === '') {
			alert('Preencha o logradouro!');
			return;
		}

		if (values.clientAddressNeighborhood === '') {
			alert('Preencha o bairro ou município!');
			return;
		}

		if (values.clientAddressCity === '') {
			alert('Preencha a cidade!');
			return;
		}

		if (values.clientAddressState === '') {
			alert('Preencha o estado!');
			return;
		}

		if (values.clientAddressZipCode === '') {
			alert('Preencha o CEP!');
			return;
		}

		if (values.orders.length === 0) {
			alert('Adicione pelo menos um produto!');
			return;
		}

		if (values.paymentConditions.length === 0) {
			alert('Adicione pelo menos uma condição de pagamento!');
			return;
		}

		if (values.observations.length > 0) {
			if (values.observations.some(o => o.value === '')) {
				alert('Preencha todas as observações!');
				return;
			}
		}

		if (isCreating) {
			// Create an estimate document on firestore
			const estimateRef = db.collection('estimates').doc();

			estimateRef.set({
				status: 'pending',
				client: {
					name: values.clientName,
					address: {
						street: values.clientAddressStreet,
						number: values.clientAddressNumber,
						complement: values.clientAddressComplement,
						neighborhood: values.clientAddressNeighborhood,
						city: values.clientAddressCity,
						state: values.clientAddressState,
						zipCode: values.clientAddressZipCode,
						reference: values.clientAddressReference
					}
				},
				products: values.orders,
				professional: values.professional,
				priceTotal: values.totalPrice,
				paymentConditions: values.paymentConditions,
				observations: values.observations,
				created_in: firebase.firestore.FieldValue.serverTimestamp(),
				updated_in: firebase.firestore.FieldValue.serverTimestamp()
			}).then(() => {
				// Clear localStorage
				Object.keys(values).forEach(key => {
					window.localStorage.removeItem(key);
				});

				navigateTo('/admin/estimates');
			}).catch(err => {
				alert(`Erro ao criar orçamento: ${err}`);
			});
		} else {
			// Update the estimate document on firestore
			db.collection('estimates').doc(params.id).update({
				client: {
					name: values.clientName,
					address: {
						street: values.clientAddressStreet,
						number: values.clientAddressNumber,
						complement: values.clientAddressComplement,
						neighborhood: values.clientAddressNeighborhood,
						city: values.clientAddressCity,
						state: values.clientAddressState,
						zipCode: values.clientAddressZipCode,
						reference: values.clientAddressReference
					}
				},
				products: values.orders,
				professional: values.professional,
				priceTotal: values.totalPrice,
				paymentConditions: values.paymentConditions,
				observations: values.observations,
				updated_in: firebase.firestore.FieldValue.serverTimestamp()
			}).then(() => {
				// Clear localStorage
				Object.keys(values).forEach(key => {
					window.localStorage.removeItem(key);
				});

				navigateTo('/admin/estimates');
			}).catch(err => {
				alert(`Erro ao atualizar orçamento: ${err}`);
			});
		}
	};

	function inputmask0_value_binding(value) {
		if ($$self.$$.not_equal(values.clientName, value)) {
			values.clientName = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask1_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressZipCode, value)) {
			values.clientAddressZipCode = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask2_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressStreet, value)) {
			values.clientAddressStreet = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask3_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressNumber, value)) {
			values.clientAddressNumber = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask4_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressComplement, value)) {
			values.clientAddressComplement = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask5_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressNeighborhood, value)) {
			values.clientAddressNeighborhood = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask6_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressCity, value)) {
			values.clientAddressCity = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask7_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressState, value)) {
			values.clientAddressState = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask8_value_binding(value) {
		if ($$self.$$.not_equal(values.clientAddressReference, value)) {
			values.clientAddressReference = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	function inputmask9_value_binding(value) {
		if ($$self.$$.not_equal(values.professional, value)) {
			values.professional = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	const click_handler = () => createNewProductOrder();
	const click_handler_1 = i => deleteProductOrder(i);
	const click_handler_2 = (i, item, product) => showProductOrderEditor(i, item, product.name, product.image);

	function inputmask10_value_binding(value) {
		if ($$self.$$.not_equal(values.totalPrice, value)) {
			values.totalPrice = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	const click_handler_3 = () => createNewPaymentCondition();
	const click_handler_4 = (i, item) => showPaymentConditionsEditor(i, item);
	const click_handler_5 = i => deletePaymentConditionsLine(i);

	const click_handler_6 = () => {
		values.observations.push({ value: '' });
		$$invalidate(0, values.observations = [...values.observations], values);
	};

	function inputmask_value_binding(value, item) {
		if ($$self.$$.not_equal(item.value, value)) {
			item.value = value;
			(((((((($$invalidate(0, values), $$invalidate(37, $newOrderReady)), $$invalidate(32, $newOrderInfo)), $$invalidate(36, $orderEditReady)), $$invalidate(33, $orderEditIndex)), $$invalidate(35, $newPaymentConditionReady)), $$invalidate(30, $newPaymentConditionInfo)), $$invalidate(34, $paymentConditionEditReady)), $$invalidate(31, $paymentConditionEditIndex));
		}
	}

	const click_handler_7 = i => {
		values.observations.splice(i, 1);
		$$invalidate(0, values.observations = [...values.observations], values);
	};

	const click_handler_8 = () => handleSubmit();

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*values*/ 1 | $$self.$$.dirty[1] & /*$newOrderReady, $newOrderInfo*/ 66) {
			$: if ($newOrderReady) {
				// Add a new product order to the list when it's ready
				values.orders.push({ ...$newOrderInfo });

				$$invalidate(0, values = { ...values });

				set_store_value(
					newOrderInfo,
					$newOrderInfo = {
						id: null,
						count: 0,
						ambient: '',
						features: {}
					},
					$newOrderInfo
				);

				set_store_value(newOrderReady, $newOrderReady = false, $newOrderReady);
				handleOrderChange();
			}
		}

		if ($$self.$$.dirty[0] & /*values*/ 1 | $$self.$$.dirty[1] & /*$orderEditReady, $orderEditIndex, $newOrderInfo*/ 38) {
			$: if ($orderEditReady) {
				// Update the product order when it's ready
				$$invalidate(0, values.orders[$orderEditIndex] = { ...$newOrderInfo }, values);

				$$invalidate(0, values = { ...values });

				set_store_value(
					newOrderInfo,
					$newOrderInfo = {
						id: null,
						count: 0,
						ambient: '',
						features: {}
					},
					$newOrderInfo
				);

				set_store_value(orderEditReady, $orderEditReady = false, $orderEditReady);
				set_store_value(orderEditIndex, $orderEditIndex = null, $orderEditIndex);
				handleOrderChange();
			}
		}

		if ($$self.$$.dirty[0] & /*values, $newPaymentConditionInfo*/ 1073741825 | $$self.$$.dirty[1] & /*$newPaymentConditionReady*/ 16) {
			$: if ($newPaymentConditionReady) {
				// Add a new payment condition to the list when it's ready
				values.paymentConditions.push({ ...$newPaymentConditionInfo });

				$$invalidate(0, values = { ...values });
				set_store_value(newPaymentConditionInfo, $newPaymentConditionInfo = { first: '', second: '', third: '' }, $newPaymentConditionInfo);
				set_store_value(newPaymentConditionReady, $newPaymentConditionReady = false, $newPaymentConditionReady);
			}
		}

		if ($$self.$$.dirty[0] & /*$newPaymentConditionInfo, values*/ 1073741825 | $$self.$$.dirty[1] & /*$paymentConditionEditReady, $paymentConditionEditIndex*/ 9) {
			$: if ($paymentConditionEditReady) {
				// Update the payment condition when it's ready
				$$invalidate(0, values.paymentConditions[$paymentConditionEditIndex] = { ...$newPaymentConditionInfo }, values);

				$$invalidate(0, values = { ...values });
				set_store_value(newPaymentConditionInfo, $newPaymentConditionInfo = { first: '', second: '', third: '' }, $newPaymentConditionInfo);
				set_store_value(paymentConditionEditReady, $paymentConditionEditReady = false, $paymentConditionEditReady);
				set_store_value(paymentConditionEditIndex, $paymentConditionEditIndex = null, $paymentConditionEditIndex);
			}
		}

		if ($$self.$$.dirty[0] & /*values*/ 1) {
			$: {
				// Update every non-empty key of `values` on localStorage
				Object.keys(values).forEach(key => {
					const value = values[key];

					if (value !== '' && !!value && (Array.isArray(value) && value.length > 0)) {
						window.localStorage.setItem(key, JSON.stringify(values[key]));
					}
				});
			}
		}
	};

	return [
		values,
		newOrderInfo,
		newOrderReady,
		orderEditReady,
		orderEditIndex,
		newPaymentConditionInfo,
		newPaymentConditionReady,
		paymentConditionEditReady,
		paymentConditionEditIndex,
		isCreating,
		clientNameOptions,
		clientAddressStreetOptions,
		clientAddressNumberOptions,
		clientAddressComplementOptions,
		clientAddressNeighborhoodOptions,
		clientAddressCityOptions,
		clientAddressStateOptions,
		clientAddressZipCodeOptions,
		clientAddressReferenceOptions,
		professionalNameOptions,
		totalPriceOptions,
		observationOptions,
		showProductOrderEditor,
		showPaymentConditionsEditor,
		createNewProductOrder,
		createNewPaymentCondition,
		formatPrice,
		deleteProductOrder,
		deletePaymentConditionsLine,
		handleSubmit,
		$newPaymentConditionInfo,
		$paymentConditionEditIndex,
		$newOrderInfo,
		$orderEditIndex,
		$paymentConditionEditReady,
		$newPaymentConditionReady,
		$orderEditReady,
		$newOrderReady,
		inputmask0_value_binding,
		inputmask1_value_binding,
		inputmask2_value_binding,
		inputmask3_value_binding,
		inputmask4_value_binding,
		inputmask5_value_binding,
		inputmask6_value_binding,
		inputmask7_value_binding,
		inputmask8_value_binding,
		inputmask9_value_binding,
		click_handler,
		click_handler_1,
		click_handler_2,
		inputmask10_value_binding,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		inputmask_value_binding,
		click_handler_7,
		click_handler_8
	];
}

class EstimatesEditor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1, -1]);
	}
}

export default EstimatesEditor;