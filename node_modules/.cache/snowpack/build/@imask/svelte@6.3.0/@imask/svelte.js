import * as imask from 'imask';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var require$$0 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(imask);

var svelteImask = createCommonjsModule(function (module, exports) {
(function (global, factory) {
   factory(exports, require$$0) ;
})(commonjsGlobal, (function (exports, IMask) {
  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var IMask__default = /*#__PURE__*/_interopDefaultLegacy(IMask);

  function fireEvent(el, eventName, data) {
    var e = document.createEvent('CustomEvent');
    e.initCustomEvent(eventName, true, true, data);
    el.dispatchEvent(e);
  }

  function initMask(el, opts) {
    var maskRef = opts instanceof IMask__default["default"].InputMask ? opts : IMask__default["default"](el, opts);
    return maskRef.on('accept', function () {
      return fireEvent(el, 'accept', maskRef);
    }).on('complete', function () {
      return fireEvent(el, 'complete', maskRef);
    });
  }

  function IMaskAction(el, options) {
    var maskRef = options && initMask(el, options);

    function destroy() {
      if (maskRef) {
        maskRef.destroy();
        maskRef = undefined;
      }
    }

    function update(options) {
      if (options) {
        if (maskRef) {
          if (options instanceof IMask__default["default"].InputMask) maskRef = options;else maskRef.updateOptions(options);
        } else maskRef = initMask(el, options);
      } else {
        destroy();
      }
    }

    return {
      update: update,
      destroy: destroy
    };
  }

  exports.imask = IMaskAction;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

});

var __pika_web_default_export_for_treeshaking__ = /*@__PURE__*/getDefaultExportFromCjs(svelteImask);

export default __pika_web_default_export_for_treeshaking__;
var imask$1 = svelteImask.imask;
export { svelteImask as __moduleExports, imask$1 as imask };
