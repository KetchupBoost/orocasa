import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, append_styles, create_slot, validate_slots, globals, element, space, create_component, attr_dev, null_to_empty, toggle_class, add_location, insert_dev, append_dev, mount_component, listen_dev, is_function, transition_in, group_outros, transition_out, check_outros, destroy_component, add_render_callback, create_bidirectional_transition, detach_dev, run_all, empty, update_slot_base, get_all_dirty_from_scope, get_slot_changes, binding_callbacks, noop } from 'svelte/internal';
import * as svelte from 'svelte';
import { createEventDispatcher, onDestroy, onMount, setContext } from 'svelte';
import { fade } from 'svelte/transition';

/* node_modules\svelte-simple-modal\src\Modal.svelte generated by Svelte v3.46.3 */

const { Object: Object_1, window: window_1 } = globals;
const file = "node_modules\\svelte-simple-modal\\src\\Modal.svelte";

function add_css(target) {
	append_styles(target, "svelte-1l7fz0q", ".svelte-1l7fz0q{box-sizing:border-box}.bg.svelte-1l7fz0q{position:fixed;z-index:1000;top:0;left:0;display:flex;flex-direction:column;justify-content:center;width:100vw;height:100vh;background:rgba(0, 0, 0, 0.66)}.wrap.svelte-1l7fz0q{position:relative;margin:2rem;max-height:100%}.window.svelte-1l7fz0q{position:relative;width:40rem;max-width:100%;max-height:100%;margin:2rem auto;color:black;border-radius:0.5rem;background:white}.content.svelte-1l7fz0q{position:relative;padding:1rem;max-height:calc(100vh - 4rem);overflow:auto}.close.svelte-1l7fz0q{display:block;box-sizing:border-box;position:absolute;z-index:1000;top:1rem;right:1rem;margin:0;padding:0;width:1.5rem;height:1.5rem;border:0;color:black;border-radius:1.5rem;background:white;box-shadow:0 0 0 1px black;transition:transform 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\r\n      background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);-webkit-appearance:none}.close.svelte-1l7fz0q:before,.close.svelte-1l7fz0q:after{content:'';display:block;box-sizing:border-box;position:absolute;top:50%;width:1rem;height:1px;background:black;transform-origin:center;transition:height 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\r\n      background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1)}.close.svelte-1l7fz0q:before{-webkit-transform:translate(0, -50%) rotate(45deg);-moz-transform:translate(0, -50%) rotate(45deg);transform:translate(0, -50%) rotate(45deg);left:0.25rem}.close.svelte-1l7fz0q:after{-webkit-transform:translate(0, -50%) rotate(-45deg);-moz-transform:translate(0, -50%) rotate(-45deg);transform:translate(0, -50%) rotate(-45deg);left:0.25rem}.close.svelte-1l7fz0q:hover{background:black}.close.svelte-1l7fz0q:hover:before,.close.svelte-1l7fz0q:hover:after{height:2px;background:white}.close.svelte-1l7fz0q:focus{border-color:#3399ff;box-shadow:0 0 0 2px #3399ff}.close.svelte-1l7fz0q:active{transform:scale(0.9)}.close.svelte-1l7fz0q:hover,.close.svelte-1l7fz0q:focus,.close.svelte-1l7fz0q:active{outline:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

// (396:0) {#if Component}
function create_if_block(ctx) {
	let div3;
	let div2;
	let div1;
	let t;
	let div0;
	let switch_instance;
	let div0_class_value;
	let div1_class_value;
	let div1_aria_label_value;
	let div1_aria_labelledby_value;
	let div1_transition;
	let div2_class_value;
	let div3_class_value;
	let div3_transition;
	let current;
	let mounted;
	let dispose;
	let if_block = /*state*/ ctx[1].closeButton && create_if_block_1(ctx);
	var switch_value = /*Component*/ ctx[2];

	function switch_props(ctx) {
		return { $$inline: true };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*state*/ ctx[1].classContent) + " svelte-1l7fz0q"));
			attr_dev(div0, "style", /*cssContent*/ ctx[9]);
			toggle_class(div0, "content", !/*unstyled*/ ctx[0]);
			add_location(div0, file, 439, 8, 11437);
			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindow) + " svelte-1l7fz0q"));
			attr_dev(div1, "role", "dialog");
			attr_dev(div1, "aria-modal", "true");

			attr_dev(div1, "aria-label", div1_aria_label_value = /*state*/ ctx[1].ariaLabelledBy
			? null
			: /*state*/ ctx[1].ariaLabel || null);

			attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value = /*state*/ ctx[1].ariaLabelledBy || null);
			attr_dev(div1, "style", /*cssWindow*/ ctx[8]);
			toggle_class(div1, "window", !/*unstyled*/ ctx[0]);
			add_location(div1, file, 411, 6, 10462);
			attr_dev(div2, "class", div2_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindowWrap) + " svelte-1l7fz0q"));
			attr_dev(div2, "style", /*cssWindowWrap*/ ctx[7]);
			toggle_class(div2, "wrap", !/*unstyled*/ ctx[0]);
			add_location(div2, file, 405, 4, 10323);
			attr_dev(div3, "class", div3_class_value = "" + (null_to_empty(/*state*/ ctx[1].classBg) + " svelte-1l7fz0q"));
			attr_dev(div3, "style", /*cssBg*/ ctx[6]);
			toggle_class(div3, "bg", !/*unstyled*/ ctx[0]);
			add_location(div3, file, 396, 2, 10068);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div1);
			if (if_block) if_block.m(div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);

			if (switch_instance) {
				mount_component(switch_instance, div0, null);
			}

			/*div1_binding*/ ctx[48](div1);
			/*div2_binding*/ ctx[49](div2);
			/*div3_binding*/ ctx[50](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(
						div1,
						"introstart",
						function () {
							if (is_function(/*onOpen*/ ctx[13])) /*onOpen*/ ctx[13].apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(
						div1,
						"outrostart",
						function () {
							if (is_function(/*onClose*/ ctx[14])) /*onClose*/ ctx[14].apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(
						div1,
						"introend",
						function () {
							if (is_function(/*onOpened*/ ctx[15])) /*onOpened*/ ctx[15].apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(
						div1,
						"outroend",
						function () {
							if (is_function(/*onClosed*/ ctx[16])) /*onClosed*/ ctx[16].apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(div3, "mousedown", /*handleOuterMousedown*/ ctx[20], false, false, false),
					listen_dev(div3, "mouseup", /*handleOuterMouseup*/ ctx[21], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*state*/ ctx[1].closeButton) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*state*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (switch_value !== (switch_value = /*Component*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div0, null);
				} else {
					switch_instance = null;
				}
			}

			if (!current || dirty[0] & /*state*/ 2 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*state*/ ctx[1].classContent) + " svelte-1l7fz0q"))) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*cssContent*/ 512) {
				attr_dev(div0, "style", /*cssContent*/ ctx[9]);
			}

			if (dirty[0] & /*state, unstyled*/ 3) {
				toggle_class(div0, "content", !/*unstyled*/ ctx[0]);
			}

			if (!current || dirty[0] & /*state*/ 2 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindow) + " svelte-1l7fz0q"))) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (!current || dirty[0] & /*state*/ 2 && div1_aria_label_value !== (div1_aria_label_value = /*state*/ ctx[1].ariaLabelledBy
			? null
			: /*state*/ ctx[1].ariaLabel || null)) {
				attr_dev(div1, "aria-label", div1_aria_label_value);
			}

			if (!current || dirty[0] & /*state*/ 2 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*state*/ ctx[1].ariaLabelledBy || null)) {
				attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (!current || dirty[0] & /*cssWindow*/ 256) {
				attr_dev(div1, "style", /*cssWindow*/ ctx[8]);
			}

			if (dirty[0] & /*state, unstyled*/ 3) {
				toggle_class(div1, "window", !/*unstyled*/ ctx[0]);
			}

			if (!current || dirty[0] & /*state*/ 2 && div2_class_value !== (div2_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindowWrap) + " svelte-1l7fz0q"))) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (!current || dirty[0] & /*cssWindowWrap*/ 128) {
				attr_dev(div2, "style", /*cssWindowWrap*/ ctx[7]);
			}

			if (dirty[0] & /*state, unstyled*/ 3) {
				toggle_class(div2, "wrap", !/*unstyled*/ ctx[0]);
			}

			if (!current || dirty[0] & /*state*/ 2 && div3_class_value !== (div3_class_value = "" + (null_to_empty(/*state*/ ctx[1].classBg) + " svelte-1l7fz0q"))) {
				attr_dev(div3, "class", div3_class_value);
			}

			if (!current || dirty[0] & /*cssBg*/ 64) {
				attr_dev(div3, "style", /*cssBg*/ ctx[6]);
			}

			if (dirty[0] & /*state, unstyled*/ 3) {
				toggle_class(div3, "bg", !/*unstyled*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[12], /*state*/ ctx[1].transitionWindowProps, true);
				div1_transition.run(1);
			});

			add_render_callback(() => {
				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[11], /*state*/ ctx[1].transitionBgProps, true);
				div3_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[12], /*state*/ ctx[1].transitionWindowProps, false);
			div1_transition.run(0);
			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[11], /*state*/ ctx[1].transitionBgProps, false);
			div3_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (if_block) if_block.d();
			if (switch_instance) destroy_component(switch_instance);
			/*div1_binding*/ ctx[48](null);
			if (detaching && div1_transition) div1_transition.end();
			/*div2_binding*/ ctx[49](null);
			/*div3_binding*/ ctx[50](null);
			if (detaching && div3_transition) div3_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(396:0) {#if Component}",
		ctx
	});

	return block;
}

// (427:8) {#if state.closeButton}
function create_if_block_1(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty[0] & /*state*/ 2) show_if = null;
		if (show_if == null) show_if = !!/*isFunction*/ ctx[17](/*state*/ ctx[1].closeButton);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(427:8) {#if state.closeButton}",
		ctx
	});

	return block;
}

// (430:10) {:else}
function create_else_block(ctx) {
	let button;
	let button_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*state*/ ctx[1].classCloseButton) + " svelte-1l7fz0q"));
			attr_dev(button, "aria-label", "Close modal");
			attr_dev(button, "style", /*cssCloseButton*/ ctx[10]);
			toggle_class(button, "close", !/*unstyled*/ ctx[0]);
			add_location(button, file, 430, 12, 11177);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*close*/ ctx[18], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty(/*state*/ ctx[1].classCloseButton) + " svelte-1l7fz0q"))) {
				attr_dev(button, "class", button_class_value);
			}

			if (dirty[0] & /*cssCloseButton*/ 1024) {
				attr_dev(button, "style", /*cssCloseButton*/ ctx[10]);
			}

			if (dirty[0] & /*state, unstyled*/ 3) {
				toggle_class(button, "close", !/*unstyled*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(430:10) {:else}",
		ctx
	});

	return block;
}

// (428:10) {#if isFunction(state.closeButton)}
function create_if_block_2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*state*/ ctx[1].closeButton;

	function switch_props(ctx) {
		return {
			props: { onClose: /*close*/ ctx[18] },
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (switch_value !== (switch_value = /*state*/ ctx[1].closeButton)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(428:10) {#if isFunction(state.closeButton)}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = /*Component*/ ctx[2] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[47].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[46], null);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(window_1, "keydown", /*handleKeydown*/ ctx[19], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*Component*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*Component*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[46],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[46])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[46], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function bind(Component, props = {}) {
	return function ModalComponent(options) {
		return new Component({
				...options,
				props: { ...props, ...options.props }
			});
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Modal', slots, ['default']);
	const dispatch = createEventDispatcher();
	const baseSetContext = setContext;
	let { show = null } = $$props;
	let { key = 'simple-modal' } = $$props;
	let { ariaLabel = null } = $$props;
	let { ariaLabelledBy = null } = $$props;
	let { closeButton = true } = $$props;
	let { closeOnEsc = true } = $$props;
	let { closeOnOuterClick = true } = $$props;
	let { styleBg = {} } = $$props;
	let { styleWindowWrap = {} } = $$props;
	let { styleWindow = {} } = $$props;
	let { styleContent = {} } = $$props;
	let { styleCloseButton = {} } = $$props;
	let { classBg = null } = $$props;
	let { classWindowWrap = null } = $$props;
	let { classWindow = null } = $$props;
	let { classContent = null } = $$props;
	let { classCloseButton = null } = $$props;
	let { unstyled = false } = $$props;
	let { setContext: setContext$1 = baseSetContext } = $$props;
	let { transitionBg = fade } = $$props;
	let { transitionBgProps = { duration: 250 } } = $$props;
	let { transitionWindow = transitionBg } = $$props;
	let { transitionWindowProps = transitionBgProps } = $$props;
	let { disableFocusTrap = false } = $$props;

	const defaultState = {
		ariaLabel,
		ariaLabelledBy,
		closeButton,
		closeOnEsc,
		closeOnOuterClick,
		styleBg,
		styleWindowWrap,
		styleWindow,
		styleContent,
		styleCloseButton,
		classBg,
		classWindowWrap,
		classWindow,
		classContent,
		classCloseButton,
		transitionBg,
		transitionBgProps,
		transitionWindow,
		transitionWindowProps,
		disableFocusTrap,
		unstyled
	};

	let state = { ...defaultState };
	let Component = null;
	let background;
	let wrap;
	let modalWindow;
	let scrollY;
	let cssBg;
	let cssWindowWrap;
	let cssWindow;
	let cssContent;
	let cssCloseButton;
	let currentTransitionBg;
	let currentTransitionWindow;
	let prevBodyPosition;
	let prevBodyOverflow;
	let prevBodyWidth;
	let outerClickTarget;
	const camelCaseToDash = str => str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();

	const toCssString = props => props
	? Object.keys(props).reduce((str, key) => `${str}; ${camelCaseToDash(key)}: ${props[key]}`, '')
	: '';

	const isFunction = f => !!(f && f.constructor && f.call && f.apply);

	const updateStyleTransition = () => {
		$$invalidate(6, cssBg = toCssString(Object.assign(
			{},
			{
				width: window.innerWidth,
				height: window.innerHeight
			},
			state.styleBg
		)));

		$$invalidate(7, cssWindowWrap = toCssString(state.styleWindowWrap));
		$$invalidate(8, cssWindow = toCssString(state.styleWindow));
		$$invalidate(9, cssContent = toCssString(state.styleContent));
		$$invalidate(10, cssCloseButton = toCssString(state.styleCloseButton));
		$$invalidate(11, currentTransitionBg = state.transitionBg);
		$$invalidate(12, currentTransitionWindow = state.transitionWindow);
	};

	const toVoid = () => {
		
	};

	let onOpen = toVoid;
	let onClose = toVoid;
	let onOpened = toVoid;
	let onClosed = toVoid;

	const open = (NewComponent, newProps = {}, options = {}, callback = {}) => {
		$$invalidate(2, Component = bind(NewComponent, newProps));
		$$invalidate(1, state = { ...defaultState, ...options });
		updateStyleTransition();
		disableScroll();

		$$invalidate(13, onOpen = event => {
			if (callback.onOpen) callback.onOpen(event);

			/**
 * The open event is fired right before the modal opens
 * @event {void} open
 */
			dispatch('open');

			/**
 * The opening event is fired right before the modal opens
 * @event {void} opening
 * @deprecated Listen to the `open` event instead
 */
			dispatch('opening'); // Deprecated. Do not use!
		});

		$$invalidate(14, onClose = event => {
			if (callback.onClose) callback.onClose(event);

			/**
 * The close event is fired right before the modal closes
 * @event {void} close
 */
			dispatch('close');

			/**
 * The closing event is fired right before the modal closes
 * @event {void} closing
 * @deprecated Listen to the `close` event instead
 */
			dispatch('closing'); // Deprecated. Do not use!
		});

		$$invalidate(15, onOpened = event => {
			if (callback.onOpened) callback.onOpened(event);

			/**
 * The opened event is fired after the modal's opening transition
 * @event {void} opened
 */
			dispatch('opened');
		});

		$$invalidate(16, onClosed = event => {
			if (callback.onClosed) callback.onClosed(event);

			/**
 * The closed event is fired after the modal's closing transition
 * @event {void} closed
 */
			dispatch('closed');
		});
	};

	const close = (callback = {}) => {
		if (!Component) return;
		$$invalidate(14, onClose = callback.onClose || onClose);
		$$invalidate(16, onClosed = callback.onClosed || onClosed);
		$$invalidate(2, Component = null);
		enableScroll();
	};

	const handleKeydown = event => {
		if (state.closeOnEsc && Component && event.key === 'Escape') {
			event.preventDefault();
			close();
		}

		if (Component && event.key === 'Tab' && !state.disableFocusTrap) {
			// trap focus
			const nodes = modalWindow.querySelectorAll('*');

			const tabbable = Array.from(nodes).filter(node => node.tabIndex >= 0);
			let index = tabbable.indexOf(document.activeElement);
			if (index === -1 && event.shiftKey) index = 0;
			index += tabbable.length + (event.shiftKey ? -1 : 1);
			index %= tabbable.length;
			tabbable[index].focus();
			event.preventDefault();
		}
	};

	const handleOuterMousedown = event => {
		if (state.closeOnOuterClick && (event.target === background || event.target === wrap)) outerClickTarget = event.target;
	};

	const handleOuterMouseup = event => {
		if (state.closeOnOuterClick && event.target === outerClickTarget) {
			event.preventDefault();
			close();
		}
	};

	const disableScroll = () => {
		scrollY = window.scrollY;
		prevBodyPosition = document.body.style.position;
		prevBodyOverflow = document.body.style.overflow;
		prevBodyWidth = document.body.style.width;
		document.body.style.position = 'fixed';
		document.body.style.top = `-${scrollY}px`;
		document.body.style.overflow = 'hidden';
		document.body.style.width = '100%';
	};

	const enableScroll = () => {
		document.body.style.position = prevBodyPosition || '';
		document.body.style.top = '';
		document.body.style.overflow = prevBodyOverflow || '';
		document.body.style.width = prevBodyWidth || '';
		window.scrollTo(0, scrollY);
	};

	setContext$1(key, { open, close });
	let isMounted = false;

	onDestroy(() => {
		if (isMounted) close();
	});

	onMount(() => {
		$$invalidate(45, isMounted = true);
	});

	const writable_props = [
		'show',
		'key',
		'ariaLabel',
		'ariaLabelledBy',
		'closeButton',
		'closeOnEsc',
		'closeOnOuterClick',
		'styleBg',
		'styleWindowWrap',
		'styleWindow',
		'styleContent',
		'styleCloseButton',
		'classBg',
		'classWindowWrap',
		'classWindow',
		'classContent',
		'classCloseButton',
		'unstyled',
		'setContext',
		'transitionBg',
		'transitionBgProps',
		'transitionWindow',
		'transitionWindowProps',
		'disableFocusTrap'
	];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Modal> was created with unknown prop '${key}'`);
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			modalWindow = $$value;
			$$invalidate(5, modalWindow);
		});
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrap = $$value;
			$$invalidate(4, wrap);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			background = $$value;
			$$invalidate(3, background);
		});
	}

	$$self.$$set = $$props => {
		if ('show' in $$props) $$invalidate(22, show = $$props.show);
		if ('key' in $$props) $$invalidate(23, key = $$props.key);
		if ('ariaLabel' in $$props) $$invalidate(24, ariaLabel = $$props.ariaLabel);
		if ('ariaLabelledBy' in $$props) $$invalidate(25, ariaLabelledBy = $$props.ariaLabelledBy);
		if ('closeButton' in $$props) $$invalidate(26, closeButton = $$props.closeButton);
		if ('closeOnEsc' in $$props) $$invalidate(27, closeOnEsc = $$props.closeOnEsc);
		if ('closeOnOuterClick' in $$props) $$invalidate(28, closeOnOuterClick = $$props.closeOnOuterClick);
		if ('styleBg' in $$props) $$invalidate(29, styleBg = $$props.styleBg);
		if ('styleWindowWrap' in $$props) $$invalidate(30, styleWindowWrap = $$props.styleWindowWrap);
		if ('styleWindow' in $$props) $$invalidate(31, styleWindow = $$props.styleWindow);
		if ('styleContent' in $$props) $$invalidate(32, styleContent = $$props.styleContent);
		if ('styleCloseButton' in $$props) $$invalidate(33, styleCloseButton = $$props.styleCloseButton);
		if ('classBg' in $$props) $$invalidate(34, classBg = $$props.classBg);
		if ('classWindowWrap' in $$props) $$invalidate(35, classWindowWrap = $$props.classWindowWrap);
		if ('classWindow' in $$props) $$invalidate(36, classWindow = $$props.classWindow);
		if ('classContent' in $$props) $$invalidate(37, classContent = $$props.classContent);
		if ('classCloseButton' in $$props) $$invalidate(38, classCloseButton = $$props.classCloseButton);
		if ('unstyled' in $$props) $$invalidate(0, unstyled = $$props.unstyled);
		if ('setContext' in $$props) $$invalidate(39, setContext$1 = $$props.setContext);
		if ('transitionBg' in $$props) $$invalidate(40, transitionBg = $$props.transitionBg);
		if ('transitionBgProps' in $$props) $$invalidate(41, transitionBgProps = $$props.transitionBgProps);
		if ('transitionWindow' in $$props) $$invalidate(42, transitionWindow = $$props.transitionWindow);
		if ('transitionWindowProps' in $$props) $$invalidate(43, transitionWindowProps = $$props.transitionWindowProps);
		if ('disableFocusTrap' in $$props) $$invalidate(44, disableFocusTrap = $$props.disableFocusTrap);
		if ('$$scope' in $$props) $$invalidate(46, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		bind,
		svelte,
		fade,
		createEventDispatcher,
		dispatch,
		baseSetContext,
		show,
		key,
		ariaLabel,
		ariaLabelledBy,
		closeButton,
		closeOnEsc,
		closeOnOuterClick,
		styleBg,
		styleWindowWrap,
		styleWindow,
		styleContent,
		styleCloseButton,
		classBg,
		classWindowWrap,
		classWindow,
		classContent,
		classCloseButton,
		unstyled,
		setContext: setContext$1,
		transitionBg,
		transitionBgProps,
		transitionWindow,
		transitionWindowProps,
		disableFocusTrap,
		defaultState,
		state,
		Component,
		background,
		wrap,
		modalWindow,
		scrollY,
		cssBg,
		cssWindowWrap,
		cssWindow,
		cssContent,
		cssCloseButton,
		currentTransitionBg,
		currentTransitionWindow,
		prevBodyPosition,
		prevBodyOverflow,
		prevBodyWidth,
		outerClickTarget,
		camelCaseToDash,
		toCssString,
		isFunction,
		updateStyleTransition,
		toVoid,
		onOpen,
		onClose,
		onOpened,
		onClosed,
		open,
		close,
		handleKeydown,
		handleOuterMousedown,
		handleOuterMouseup,
		disableScroll,
		enableScroll,
		isMounted
	});

	$$self.$inject_state = $$props => {
		if ('show' in $$props) $$invalidate(22, show = $$props.show);
		if ('key' in $$props) $$invalidate(23, key = $$props.key);
		if ('ariaLabel' in $$props) $$invalidate(24, ariaLabel = $$props.ariaLabel);
		if ('ariaLabelledBy' in $$props) $$invalidate(25, ariaLabelledBy = $$props.ariaLabelledBy);
		if ('closeButton' in $$props) $$invalidate(26, closeButton = $$props.closeButton);
		if ('closeOnEsc' in $$props) $$invalidate(27, closeOnEsc = $$props.closeOnEsc);
		if ('closeOnOuterClick' in $$props) $$invalidate(28, closeOnOuterClick = $$props.closeOnOuterClick);
		if ('styleBg' in $$props) $$invalidate(29, styleBg = $$props.styleBg);
		if ('styleWindowWrap' in $$props) $$invalidate(30, styleWindowWrap = $$props.styleWindowWrap);
		if ('styleWindow' in $$props) $$invalidate(31, styleWindow = $$props.styleWindow);
		if ('styleContent' in $$props) $$invalidate(32, styleContent = $$props.styleContent);
		if ('styleCloseButton' in $$props) $$invalidate(33, styleCloseButton = $$props.styleCloseButton);
		if ('classBg' in $$props) $$invalidate(34, classBg = $$props.classBg);
		if ('classWindowWrap' in $$props) $$invalidate(35, classWindowWrap = $$props.classWindowWrap);
		if ('classWindow' in $$props) $$invalidate(36, classWindow = $$props.classWindow);
		if ('classContent' in $$props) $$invalidate(37, classContent = $$props.classContent);
		if ('classCloseButton' in $$props) $$invalidate(38, classCloseButton = $$props.classCloseButton);
		if ('unstyled' in $$props) $$invalidate(0, unstyled = $$props.unstyled);
		if ('setContext' in $$props) $$invalidate(39, setContext$1 = $$props.setContext);
		if ('transitionBg' in $$props) $$invalidate(40, transitionBg = $$props.transitionBg);
		if ('transitionBgProps' in $$props) $$invalidate(41, transitionBgProps = $$props.transitionBgProps);
		if ('transitionWindow' in $$props) $$invalidate(42, transitionWindow = $$props.transitionWindow);
		if ('transitionWindowProps' in $$props) $$invalidate(43, transitionWindowProps = $$props.transitionWindowProps);
		if ('disableFocusTrap' in $$props) $$invalidate(44, disableFocusTrap = $$props.disableFocusTrap);
		if ('state' in $$props) $$invalidate(1, state = $$props.state);
		if ('Component' in $$props) $$invalidate(2, Component = $$props.Component);
		if ('background' in $$props) $$invalidate(3, background = $$props.background);
		if ('wrap' in $$props) $$invalidate(4, wrap = $$props.wrap);
		if ('modalWindow' in $$props) $$invalidate(5, modalWindow = $$props.modalWindow);
		if ('scrollY' in $$props) scrollY = $$props.scrollY;
		if ('cssBg' in $$props) $$invalidate(6, cssBg = $$props.cssBg);
		if ('cssWindowWrap' in $$props) $$invalidate(7, cssWindowWrap = $$props.cssWindowWrap);
		if ('cssWindow' in $$props) $$invalidate(8, cssWindow = $$props.cssWindow);
		if ('cssContent' in $$props) $$invalidate(9, cssContent = $$props.cssContent);
		if ('cssCloseButton' in $$props) $$invalidate(10, cssCloseButton = $$props.cssCloseButton);
		if ('currentTransitionBg' in $$props) $$invalidate(11, currentTransitionBg = $$props.currentTransitionBg);
		if ('currentTransitionWindow' in $$props) $$invalidate(12, currentTransitionWindow = $$props.currentTransitionWindow);
		if ('prevBodyPosition' in $$props) prevBodyPosition = $$props.prevBodyPosition;
		if ('prevBodyOverflow' in $$props) prevBodyOverflow = $$props.prevBodyOverflow;
		if ('prevBodyWidth' in $$props) prevBodyWidth = $$props.prevBodyWidth;
		if ('outerClickTarget' in $$props) outerClickTarget = $$props.outerClickTarget;
		if ('onOpen' in $$props) $$invalidate(13, onOpen = $$props.onOpen);
		if ('onClose' in $$props) $$invalidate(14, onClose = $$props.onClose);
		if ('onOpened' in $$props) $$invalidate(15, onOpened = $$props.onOpened);
		if ('onClosed' in $$props) $$invalidate(16, onClosed = $$props.onClosed);
		if ('isMounted' in $$props) $$invalidate(45, isMounted = $$props.isMounted);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*show*/ 4194304 | $$self.$$.dirty[1] & /*isMounted*/ 16384) {
			 {
				if (isMounted) {
					if (isFunction(show)) {
						open(show);
					} else {
						close();
					}
				}
			}
		}
	};

	return [
		unstyled,
		state,
		Component,
		background,
		wrap,
		modalWindow,
		cssBg,
		cssWindowWrap,
		cssWindow,
		cssContent,
		cssCloseButton,
		currentTransitionBg,
		currentTransitionWindow,
		onOpen,
		onClose,
		onOpened,
		onClosed,
		isFunction,
		close,
		handleKeydown,
		handleOuterMousedown,
		handleOuterMouseup,
		show,
		key,
		ariaLabel,
		ariaLabelledBy,
		closeButton,
		closeOnEsc,
		closeOnOuterClick,
		styleBg,
		styleWindowWrap,
		styleWindow,
		styleContent,
		styleCloseButton,
		classBg,
		classWindowWrap,
		classWindow,
		classContent,
		classCloseButton,
		setContext$1,
		transitionBg,
		transitionBgProps,
		transitionWindow,
		transitionWindowProps,
		disableFocusTrap,
		isMounted,
		$$scope,
		slots,
		div1_binding,
		div2_binding,
		div3_binding
	];
}

class Modal extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				show: 22,
				key: 23,
				ariaLabel: 24,
				ariaLabelledBy: 25,
				closeButton: 26,
				closeOnEsc: 27,
				closeOnOuterClick: 28,
				styleBg: 29,
				styleWindowWrap: 30,
				styleWindow: 31,
				styleContent: 32,
				styleCloseButton: 33,
				classBg: 34,
				classWindowWrap: 35,
				classWindow: 36,
				classContent: 37,
				classCloseButton: 38,
				unstyled: 0,
				setContext: 39,
				transitionBg: 40,
				transitionBgProps: 41,
				transitionWindow: 42,
				transitionWindowProps: 43,
				disableFocusTrap: 44
			},
			add_css,
			[-1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Modal",
			options,
			id: create_fragment.name
		});
	}

	get show() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get key() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabelledBy() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabelledBy(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get closeButton() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set closeButton(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get closeOnEsc() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set closeOnEsc(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get closeOnOuterClick() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set closeOnOuterClick(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get styleBg() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set styleBg(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get styleWindowWrap() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set styleWindowWrap(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get styleWindow() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set styleWindow(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get styleContent() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set styleContent(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get styleCloseButton() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set styleCloseButton(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classBg() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classBg(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classWindowWrap() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classWindowWrap(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classWindow() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classWindow(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classContent() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classContent(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classCloseButton() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classCloseButton(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get unstyled() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set unstyled(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get setContext() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set setContext(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionBg() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionBg(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionBgProps() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionBgProps(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionWindow() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionWindow(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get transitionWindowProps() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set transitionWindowProps(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disableFocusTrap() {
		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disableFocusTrap(value) {
		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Modal;
export { Modal, bind };
