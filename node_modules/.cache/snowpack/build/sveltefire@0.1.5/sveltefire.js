import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, globals, validate_slots, create_slot, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, empty, insert_dev, group_outros, check_outros, detach_dev, validate_store, component_subscribe, space, subscribe, noop } from 'svelte/internal';
import { createEventDispatcher, setContext, onMount, getContext, onDestroy } from 'svelte';
import { writable } from 'svelte/store';

/* node_modules\sveltefire\src\FirebaseApp.svelte generated by Svelte v3.46.3 */

const { Error: Error_1 } = globals;

// (45:0) {#if ready}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(45:0) {#if ready}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*ready*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*ready*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*ready*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('FirebaseApp', slots, ['default']);
	let { firebase } = $$props;
	let { perf = false } = $$props;
	let { analytics = false } = $$props;

	// Ready required to use the app event,
	// prevents child components from running before init
	let ready = false;

	// Emit firebase
	const dispatch = createEventDispatcher();

	// Must be a function to ensure changes after initialization are caught
	setContext("firebase", { getFirebase: () => firebase });

	onMount(() => {
		// Set firebase context from window if needed
		$$invalidate(1, firebase = firebase || window && window.firebase);

		if (!firebase) {
			throw Error("No firebase app was provided. You must provide an initialized Firebase app or make it available globally.");
		} else {
			// Init perf and analytics
			perf && firebase.performance();

			analytics && firebase.analytics();

			// Optional event to set additional config
			dispatch("initializeApp", { firebase });

			$$invalidate(0, ready = true);
		}
	});

	const writable_props = ['firebase', 'perf', 'analytics'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FirebaseApp> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('firebase' in $$props) $$invalidate(1, firebase = $$props.firebase);
		if ('perf' in $$props) $$invalidate(2, perf = $$props.perf);
		if ('analytics' in $$props) $$invalidate(3, analytics = $$props.analytics);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		setContext,
		createEventDispatcher,
		firebase,
		perf,
		analytics,
		ready,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('firebase' in $$props) $$invalidate(1, firebase = $$props.firebase);
		if ('perf' in $$props) $$invalidate(2, perf = $$props.perf);
		if ('analytics' in $$props) $$invalidate(3, analytics = $$props.analytics);
		if ('ready' in $$props) $$invalidate(0, ready = $$props.ready);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [ready, firebase, perf, analytics, $$scope, slots];
}

class FirebaseApp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { firebase: 1, perf: 2, analytics: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FirebaseApp",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*firebase*/ ctx[1] === undefined && !('firebase' in props)) {
			console.warn("<FirebaseApp> was created without expected prop 'firebase'");
		}
	}

	get firebase() {
		throw new Error_1("<FirebaseApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set firebase(value) {
		throw new Error_1("<FirebaseApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get perf() {
		throw new Error_1("<FirebaseApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set perf(value) {
		throw new Error_1("<FirebaseApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get analytics() {
		throw new Error_1("<FirebaseApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set analytics(value) {
		throw new Error_1("<FirebaseApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function getFirebaseContext() {
  const { getFirebase } = getContext('firebase');
  return getFirebase();
}

// Validates end-user has setup context and imported proper modules into the Svelte app
function assertApp(pkg) {

    const app = getFirebaseContext();

    if (!app) {
      throw new Error(`Missing Firebase app in context. Are you inside a 'FirebaseApp' component?`)
    }

    if (pkg) {
        const pkgFn = app[pkg]; 
        if (!pkgFn || !pkgFn()) {
          throw new Error(`Firebase ${pkg} not found. You may be missing "import 'firebase/${pkg}'" `)
        } else {
          return pkgFn();
        }
    } else {
      return app;
    }
}

function userStore(opts = { persist: null }) {

    const auth = assertApp('auth');
    const storageKey = 'sveltefire_user';
    let cached = null;
  
    const { persist } = opts;
  
    if (persist) {
      cached = JSON.parse(opts.persist.getItem(storageKey));
    }
  
    const store = writable(cached, () => {
      const teardown = auth.onAuthStateChanged(u => {
        set(u);
        persist && opts.persist.setItem(storageKey, JSON.stringify(u));
      });
      return () => teardown;
    });
  
    const { subscribe, set } = store;
  
    return {
      subscribe,
      auth
    };
  }

/* node_modules\sveltefire\src\User.svelte generated by Svelte v3.46.3 */
const get_after_slot_changes = dirty => ({ user: dirty & /*$store*/ 1 });

const get_after_slot_context = ctx => ({
	user: /*$store*/ ctx[0],
	auth: /*store*/ ctx[1].auth
});

const get_signed_out_slot_changes = dirty => ({ user: dirty & /*$store*/ 1 });

const get_signed_out_slot_context = ctx => ({
	user: /*$store*/ ctx[0],
	auth: /*store*/ ctx[1].auth
});

const get_default_slot_changes = dirty => ({ user: dirty & /*$store*/ 1 });

const get_default_slot_context = ctx => ({
	user: /*$store*/ ctx[0],
	auth: /*store*/ ctx[1].auth
});

const get_before_slot_changes = dirty => ({ user: dirty & /*$store*/ 1 });

const get_before_slot_context = ctx => ({
	user: /*$store*/ ctx[0],
	auth: /*store*/ ctx[1].auth
});

// (24:0) {:else}
function create_else_block(ctx) {
	let current;
	const signed_out_slot_template = /*#slots*/ ctx[4]["signed-out"];
	const signed_out_slot = create_slot(signed_out_slot_template, ctx, /*$$scope*/ ctx[3], get_signed_out_slot_context);

	const block = {
		c: function create() {
			if (signed_out_slot) signed_out_slot.c();
		},
		m: function mount(target, anchor) {
			if (signed_out_slot) {
				signed_out_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (signed_out_slot) {
				if (signed_out_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
					update_slot_base(
						signed_out_slot,
						signed_out_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(signed_out_slot_template, /*$$scope*/ ctx[3], dirty, get_signed_out_slot_changes),
						get_signed_out_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(signed_out_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(signed_out_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (signed_out_slot) signed_out_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(24:0) {:else}",
		ctx
	});

	return block;
}

// (22:0) {#if $store}
function create_if_block$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], get_default_slot_context);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(22:0) {#if $store}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	const before_slot_template = /*#slots*/ ctx[4].before;
	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[3], get_before_slot_context);
	const if_block_creators = [create_if_block$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$store*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_slot_template = /*#slots*/ ctx[4].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[3], get_after_slot_context);

	const block = {
		c: function create() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_slot) after_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (before_slot) {
				if (before_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
					update_slot_base(
						before_slot,
						before_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(before_slot_template, /*$$scope*/ ctx[3], dirty, get_before_slot_changes),
						get_before_slot_context
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty & /*$$scope, $store*/ 9)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[3], dirty, get_after_slot_changes),
						get_after_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (before_slot) before_slot.d(detaching);
			if (detaching) detach_dev(t0);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t1);
			if (after_slot) after_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $store;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('User', slots, ['before','default','signed-out','after']);
	let { persist = null } = $$props;
	let store = userStore({ persist });
	validate_store(store, 'store');
	component_subscribe($$self, store, value => $$invalidate(0, $store = value));
	const dispatch = createEventDispatcher();
	let unsub;

	onMount(() => {
		unsub = store.subscribe(user => {
			dispatch("user", { user });
		});
	});

	onDestroy(() => unsub());
	const writable_props = ['persist'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<User> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('persist' in $$props) $$invalidate(2, persist = $$props.persist);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		persist,
		onMount,
		onDestroy,
		createEventDispatcher,
		userStore,
		store,
		dispatch,
		unsub,
		$store
	});

	$$self.$inject_state = $$props => {
		if ('persist' in $$props) $$invalidate(2, persist = $$props.persist);
		if ('store' in $$props) $$invalidate(1, store = $$props.store);
		if ('unsub' in $$props) unsub = $$props.unsub;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [$store, store, persist, $$scope, slots];
}

class User extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { persist: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "User",
			options,
			id: create_fragment$1.name
		});
	}

	get persist() {
		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set persist(value) {
		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function startTrace(name) {
    const perf = assertApp('performance');
    const trace = perf.trace(name);
    trace.start();
    return trace;
  }
  
  async function stopTrace(trace) {
    if (trace.state === 2) {
      trace.stop();
    }
  
    return null;
  }

// Svelte Store for Firestore Document
function docStore(path, opts) {
  const firestore = assertApp('firestore');

  const { startWith, log, traceId, maxWait, once } = { maxWait: 10000, ...opts };

  // Create the Firestore Reference
  const ref = typeof path === 'string' ? firestore.doc(path) : path;

  // Performance trace
  const trace = traceId && startTrace(traceId);

  // Internal state
  let _loading = typeof startWith !== undefined;
  let _firstValue = true;
  let _error = null;
  let _teardown;
  let _waitForIt;


  // State should never change without emitting a new value
  // Clears loading state on first call
  const next = (val, err) => {
    _loading = false; 
    _firstValue = false;
    _waitForIt && clearTimeout(_waitForIt);
    _error = err || null;
    set(val);
    trace && stopTrace(trace);
  };

  // Timout
  // Runs of first subscription
  const start = () => {

    // Timout for fallback slot
    _waitForIt = maxWait && setTimeout(() => _loading && next(null, new Error(`Timeout at ${maxWait}. Using fallback slot.`) ), maxWait);

    // Realtime firebase subscription
    _teardown = ref.onSnapshot(
      snapshot => {
        const data = snapshot.data() || (_firstValue && startWith) || null;

        // Optional logging
        if (log) {
          console.groupCollapsed(`Doc ${snapshot.id}`);
          console.log(`Path: ${ref.path}`);
          console.log('Snapshot:', snapshot);
          console.groupEnd();
        }

        // Emit next value
        next(data);

        // Teardown after first emitted value if once
        once && _teardown();
      },

      // Handle firebase thrown errors
      error => {
        console.error(error);
        next(null, error);
      }
    );

    // Removes firebase listener when store completes
    return () => _teardown();
  };

  // Svelte store
  const store = writable(startWith, start);
  const { subscribe, set } = store;

  return {
    subscribe,
    firestore,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    }
  };
}

// Svelte Store for Firestore Collection
function collectionStore(path, queryFn, opts) {
  const firestore = assertApp('firestore');

  const { startWith, log, traceId, maxWait, once, idField, refField } = {
    idField: 'id',
    refField: 'ref',
    maxWait: 10000,
    ...opts
  };

  const ref = typeof path === 'string' ? firestore.collection(path) : path;
  const query = queryFn && queryFn(ref);
  const trace = traceId && startTrace(traceId);

  let _loading = typeof startWith !== undefined;
  let _error = null;
  let _meta = {};
  let _teardown;
  let _waitForIt;

  // Metadata for result
  const calcMeta = (val) => {
    return val && val.length ? 
      { first: val[0], last: val[val.length - 1] } : {}
  };

  const next = (val, err) => {
    _loading = false; 
    _waitForIt && clearTimeout(_waitForIt);
    _error = err || null;
    _meta = calcMeta(val);
    set(val);
    trace && stopTrace(trace);
  };

  const start = () => {
    _waitForIt = maxWait && setTimeout(() => _loading && next(null, new Error(`Timeout at ${maxWait}. Using fallback slot.`) ), maxWait);

    _teardown = (query || ref).onSnapshot(
      snapshot => {

        // Will always return an array
        const data = snapshot.docs.map(docSnap => ({
          ...docSnap.data(),
          // Allow end user override fields mapped for ID and Ref
          ...(idField ? { [idField]: docSnap.id } : null),
          ...(refField ? { [refField]: docSnap.ref } : null)
        }));

        if (log) {
          const type = _loading ? 'New Query' : 'Updated Query';
          console.groupCollapsed(`${type} ${ref.id} | ${data.length} hits`);
          console.log(`${ref.path}`);
          console.log(`Snapshot: `, snapshot);
          console.groupEnd();
        }
        next(data);
        once && _teardown();
      },

      error => {
        console.error(error);
        next(null, error);
      }
    );

    return () => _teardown();
  };

  const store = writable(startWith, start);
  const { subscribe, set } = store;

  return {
    subscribe,
    firestore,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    },
    get meta() {
      return _meta;
    }
  };
}

/* node_modules\sveltefire\src\Doc.svelte generated by Svelte v3.46.3 */

const get_after_slot_changes$1 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_after_slot_context$1 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_fallback_slot_changes = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_fallback_slot_context = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_loading_slot_changes = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_loading_slot_context = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_default_slot_changes$1 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_default_slot_context$1 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_before_slot_changes$1 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_before_slot_context$1 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

// (52:0) {:else}
function create_else_block$1(ctx) {
	let current;
	const fallback_slot_template = /*#slots*/ ctx[10].fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, /*$$scope*/ ctx[9], get_fallback_slot_context);

	const block = {
		c: function create() {
			if (fallback_slot) fallback_slot.c();
		},
		m: function mount(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (fallback_slot) {
				if (fallback_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						fallback_slot,
						fallback_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(fallback_slot_template, /*$$scope*/ ctx[9], dirty, get_fallback_slot_changes),
						get_fallback_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fallback_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(52:0) {:else}",
		ctx
	});

	return block;
}

// (50:24) 
function create_if_block_1(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[10].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[9], get_loading_slot_context);

	const block = {
		c: function create() {
			if (loading_slot) loading_slot.c();
		},
		m: function mount(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[9], dirty, get_loading_slot_changes),
						get_loading_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(50:24) ",
		ctx
	});

	return block;
}

// (48:0) {#if $store}
function create_if_block$2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$1);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$1),
						get_default_slot_context$1
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(48:0) {#if $store}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	const before_slot_template = /*#slots*/ ctx[10].before;
	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[9], get_before_slot_context$1);
	const if_block_creators = [create_if_block$2, create_if_block_1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$store*/ ctx[1]) return 0;
		if (/*store*/ ctx[0].loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_slot_template = /*#slots*/ ctx[10].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[9], get_after_slot_context$1);

	const block = {
		c: function create() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_slot) after_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (before_slot) {
				if (before_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						before_slot,
						before_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(before_slot_template, /*$$scope*/ ctx[9], dirty, get_before_slot_changes$1),
						get_before_slot_context$1
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[9], dirty, get_after_slot_changes$1),
						get_after_slot_context$1
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (before_slot) before_slot.d(detaching);
			if (detaching) detach_dev(t0);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t1);
			if (after_slot) after_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let $store,
		$$unsubscribe_store = noop,
		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(1, $store = $$value)), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Doc', slots, ['before','default','loading','fallback','after']);
	let { path } = $$props;
	let { log = false } = $$props;
	let { traceId = "" } = $$props;
	let { startWith = undefined } = $$props;
	let { maxWait = 10000 } = $$props;
	let { once = false } = $$props;
	const opts = { startWith, traceId, log, maxWait, once };
	let store = docStore(path, opts);
	validate_store(store, 'store');
	$$subscribe_store();
	const dispatch = createEventDispatcher();
	let unsub;
	onMount(() => dispatch("ref", { ref: store.ref }));
	onDestroy(() => unsub());
	const writable_props = ['path', 'log', 'traceId', 'startWith', 'maxWait', 'once'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Doc> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('log' in $$props) $$invalidate(3, log = $$props.log);
		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate(5, startWith = $$props.startWith);
		if ('maxWait' in $$props) $$invalidate(6, maxWait = $$props.maxWait);
		if ('once' in $$props) $$invalidate(7, once = $$props.once);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		path,
		log,
		traceId,
		startWith,
		maxWait,
		once,
		onDestroy,
		onMount,
		createEventDispatcher,
		docStore,
		opts,
		store,
		dispatch,
		unsub,
		$store
	});

	$$self.$inject_state = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('log' in $$props) $$invalidate(3, log = $$props.log);
		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate(5, startWith = $$props.startWith);
		if ('maxWait' in $$props) $$invalidate(6, maxWait = $$props.maxWait);
		if ('once' in $$props) $$invalidate(7, once = $$props.once);
		if ('store' in $$props) $$subscribe_store($$invalidate(0, store = $$props.store));
		if ('unsub' in $$props) $$invalidate(8, unsub = $$props.unsub);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*unsub, path, store*/ 261) {
			// Props changed
			 {
				if (unsub) {
					// Unsub and create new store
					unsub();

					$$subscribe_store($$invalidate(0, store = docStore(path, opts)));
					dispatch("ref", { ref: store.ref });
				}

				$$invalidate(8, unsub = store.subscribe(data => {
					dispatch("data", { data });
				}));
			}
		}
	};

	return [
		store,
		$store,
		path,
		log,
		traceId,
		startWith,
		maxWait,
		once,
		unsub,
		$$scope,
		slots
	];
}

class Doc extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			path: 2,
			log: 3,
			traceId: 4,
			startWith: 5,
			maxWait: 6,
			once: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Doc",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*path*/ ctx[2] === undefined && !('path' in props)) {
			console.warn("<Doc> was created without expected prop 'path'");
		}
	}

	get path() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set path(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get log() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set log(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get traceId() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set traceId(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get startWith() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set startWith(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maxWait() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maxWait(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get once() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set once(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltefire\src\Collection.svelte generated by Svelte v3.46.3 */

const get_after_slot_changes$2 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1,
	first: dirty & /*store*/ 1,
	last: dirty & /*store*/ 1
});

const get_after_slot_context$2 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error,
	first: /*store*/ ctx[0].meta.first,
	last: /*store*/ ctx[0].meta.last
});

const get_fallback_slot_changes$1 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1,
	first: dirty & /*store*/ 1,
	last: dirty & /*store*/ 1
});

const get_fallback_slot_context$1 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error,
	first: /*store*/ ctx[0].meta.first,
	last: /*store*/ ctx[0].meta.last
});

const get_loading_slot_changes$1 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1,
	first: dirty & /*store*/ 1,
	last: dirty & /*store*/ 1
});

const get_loading_slot_context$1 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error,
	first: /*store*/ ctx[0].meta.first,
	last: /*store*/ ctx[0].meta.last
});

const get_default_slot_changes$2 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1,
	first: dirty & /*store*/ 1,
	last: dirty & /*store*/ 1
});

const get_default_slot_context$2 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error,
	first: /*store*/ ctx[0].meta.first,
	last: /*store*/ ctx[0].meta.last
});

const get_before_slot_changes$2 = dirty => ({
	data: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1,
	first: dirty & /*store*/ 1,
	last: dirty & /*store*/ 1
});

const get_before_slot_context$2 = ctx => ({
	data: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error,
	first: /*store*/ ctx[0].meta.first,
	last: /*store*/ ctx[0].meta.last
});

// (52:0) {:else}
function create_else_block$2(ctx) {
	let current;
	const fallback_slot_template = /*#slots*/ ctx[11].fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, /*$$scope*/ ctx[10], get_fallback_slot_context$1);

	const block = {
		c: function create() {
			if (fallback_slot) fallback_slot.c();
		},
		m: function mount(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (fallback_slot) {
				if (fallback_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
					update_slot_base(
						fallback_slot,
						fallback_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(fallback_slot_template, /*$$scope*/ ctx[10], dirty, get_fallback_slot_changes$1),
						get_fallback_slot_context$1
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fallback_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(52:0) {:else}",
		ctx
	});

	return block;
}

// (50:24) 
function create_if_block_1$1(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[11].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[10], get_loading_slot_context$1);

	const block = {
		c: function create() {
			if (loading_slot) loading_slot.c();
		},
		m: function mount(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[10], dirty, get_loading_slot_changes$1),
						get_loading_slot_context$1
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(50:24) ",
		ctx
	});

	return block;
}

// (48:0) {#if $store}
function create_if_block$3(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context$2);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, get_default_slot_changes$2),
						get_default_slot_context$2
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(48:0) {#if $store}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	const before_slot_template = /*#slots*/ ctx[11].before;
	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[10], get_before_slot_context$2);
	const if_block_creators = [create_if_block$3, create_if_block_1$1, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$store*/ ctx[1]) return 0;
		if (/*store*/ ctx[0].loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_slot_template = /*#slots*/ ctx[11].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[10], get_after_slot_context$2);

	const block = {
		c: function create() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_slot) after_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (before_slot) {
				if (before_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
					update_slot_base(
						before_slot,
						before_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(before_slot_template, /*$$scope*/ ctx[10], dirty, get_before_slot_changes$2),
						get_before_slot_context$2
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty & /*$$scope, $store, store*/ 1027)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[10], dirty, get_after_slot_changes$2),
						get_after_slot_context$2
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (before_slot) before_slot.d(detaching);
			if (detaching) detach_dev(t0);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t1);
			if (after_slot) after_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let $store,
		$$unsubscribe_store = noop,
		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(1, $store = $$value)), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Collection', slots, ['before','default','loading','fallback','after']);
	let { path } = $$props;
	let { query = null } = $$props;
	let { traceId = "" } = $$props;
	let { log = false } = $$props;
	let { startWith = undefined } = $$props;
	let { maxWait = 10000 } = $$props;
	let { once = false } = $$props;
	const opts = { startWith, traceId, log, maxWait, once };
	let store = collectionStore(path, query, opts);
	validate_store(store, 'store');
	$$subscribe_store();
	const dispatch = createEventDispatcher();
	let unsub;
	onMount(() => dispatch("ref", { ref: store.ref }));
	onDestroy(() => unsub());
	const writable_props = ['path', 'query', 'traceId', 'log', 'startWith', 'maxWait', 'once'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Collection> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('query' in $$props) $$invalidate(3, query = $$props.query);
		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
		if ('log' in $$props) $$invalidate(5, log = $$props.log);
		if ('startWith' in $$props) $$invalidate(6, startWith = $$props.startWith);
		if ('maxWait' in $$props) $$invalidate(7, maxWait = $$props.maxWait);
		if ('once' in $$props) $$invalidate(8, once = $$props.once);
		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		path,
		query,
		traceId,
		log,
		startWith,
		maxWait,
		once,
		onDestroy,
		onMount,
		createEventDispatcher,
		collectionStore,
		opts,
		store,
		dispatch,
		unsub,
		$store
	});

	$$self.$inject_state = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('query' in $$props) $$invalidate(3, query = $$props.query);
		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
		if ('log' in $$props) $$invalidate(5, log = $$props.log);
		if ('startWith' in $$props) $$invalidate(6, startWith = $$props.startWith);
		if ('maxWait' in $$props) $$invalidate(7, maxWait = $$props.maxWait);
		if ('once' in $$props) $$invalidate(8, once = $$props.once);
		if ('store' in $$props) $$subscribe_store($$invalidate(0, store = $$props.store));
		if ('unsub' in $$props) $$invalidate(9, unsub = $$props.unsub);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*unsub, path, query, store*/ 525) {
			// Props changed
			 {
				if (unsub) {
					unsub();
					$$subscribe_store($$invalidate(0, store = collectionStore(path, query, opts)));
					dispatch("ref", { ref: store.ref });
				}

				$$invalidate(9, unsub = store.subscribe(data => {
					dispatch("data", { data });
				}));
			}
		}
	};

	return [
		store,
		$store,
		path,
		query,
		traceId,
		log,
		startWith,
		maxWait,
		once,
		unsub,
		$$scope,
		slots
	];
}

class Collection extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			path: 2,
			query: 3,
			traceId: 4,
			log: 5,
			startWith: 6,
			maxWait: 7,
			once: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Collection",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*path*/ ctx[2] === undefined && !('path' in props)) {
			console.warn("<Collection> was created without expected prop 'path'");
		}
	}

	get path() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set path(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get query() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set query(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get traceId() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set traceId(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get log() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set log(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get startWith() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set startWith(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maxWait() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maxWait(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get once() {
		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set once(value) {
		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

// Svelte Store for Storage file
function fileDownloadStore(path, opts) {
  const storage = assertApp('storage');

  const { log, traceId, startWith, url, meta, } = { url: true, ...opts };

  const storageRef = storage.ref();
  const ref = typeof path === 'string' ? storageRef.child(path) : path;

  // Performance trace
  const trace = traceId && startTrace(traceId);

  // Internal state
  let _loading = typeof startWith !== undefined;
  let _error = null;

  // State should never change without emitting a new value
  // Clears loading state on first call
  const next = (val, err) => {
    _loading = false; 
    _error = err || null;
    set(val);
    trace && stopTrace(trace);
  };

  // Timout
  // Runs of first subscription
    const start = async() => {

      const requests = [url && ref.getDownloadURL(), meta && ref.getMetadata()];

      Promise.all(requests)
              .then(result => next({
                url: result[0],
                metadata: result[1]
              }))
              .catch(e => next(null, e));

    };


  // Svelte store
  const store = writable(startWith, start);
  const { subscribe, set } = store;

  return {
    subscribe,
    storage,
    ref,
    get loading() {
      return _loading;
    },
    get error() {
      return _error;
    }
  };
}

function uploadTaskStore(path, file, opts) {
  const storage = assertApp('storage');

  const { log, traceId } = { ...opts };

  const storageRef = storage.ref();
  
  const ref = typeof path === 'string' ? storageRef.child(path) : path;

  // Performance trace
  const trace = traceId && startTrace(traceId);

  // Internal state
  let _error = null;
  let _url = ''; // download url
  let _task; // upload task

  // Emits UploadTaskSnapshot
  const next = (val, err) => {
    _error = err || null;
    set(val);
  };

  const start = () => {
    _task = ref.put(file);

    const _teardown = _task.on('state_changed', {
      next: (snap) => next(snap),
      error: (e) => next(_task.snapshot, e),
      complete: () => {
        console.log('done');
        ref.getDownloadURL().then(url => {
          next(_task.snapshot);
          _url = url;
          if (log) console.log(`Upload Complete: ${url}`);
          trace && stopTrace(trace);
        });
      }
    });

    return () => _teardown();
  };

  const store = writable(null, start);
  const { subscribe, set } = store;

  return {
    subscribe,
    storage,
    ref,
    get downloadURL() {
      return _url;
    },
    get task() {
      return _task;
    },
    get error() {
      return _error;
    },
  };
}

/* node_modules\sveltefire\src\StorageRef.svelte generated by Svelte v3.46.3 */

const get_after_slot_changes$3 = dirty => ({
	downloadURL: dirty & /*$store*/ 2,
	metadata: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_after_slot_context$3 = ctx => ({
	downloadURL: /*$store*/ ctx[1] && /*$store*/ ctx[1].url,
	metadata: /*$store*/ ctx[1] && /*$store*/ ctx[1].metadata,
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_fallback_slot_changes$2 = dirty => ({
	downloadURL: dirty & /*$store*/ 2,
	metadata: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_fallback_slot_context$2 = ctx => ({
	downloadURL: /*$store*/ ctx[1] && /*$store*/ ctx[1].url,
	metadata: /*$store*/ ctx[1] && /*$store*/ ctx[1].metadata,
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_loading_slot_changes$2 = dirty => ({
	downloadURL: dirty & /*$store*/ 2,
	metadata: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_loading_slot_context$2 = ctx => ({
	downloadURL: /*$store*/ ctx[1] && /*$store*/ ctx[1].url,
	metadata: /*$store*/ ctx[1] && /*$store*/ ctx[1].metadata,
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_default_slot_changes$3 = dirty => ({
	downloadURL: dirty & /*$store*/ 2,
	metadata: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_default_slot_context$3 = ctx => ({
	downloadURL: /*$store*/ ctx[1] && /*$store*/ ctx[1].url,
	metadata: /*$store*/ ctx[1] && /*$store*/ ctx[1].metadata,
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

const get_before_slot_changes$3 = dirty => ({
	downloadURL: dirty & /*$store*/ 2,
	metadata: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_before_slot_context$3 = ctx => ({
	downloadURL: /*$store*/ ctx[1] && /*$store*/ ctx[1].url,
	metadata: /*$store*/ ctx[1] && /*$store*/ ctx[1].metadata,
	ref: /*store*/ ctx[0].ref,
	error: /*store*/ ctx[0].error
});

// (60:0) {:else}
function create_else_block$3(ctx) {
	let current;
	const fallback_slot_template = /*#slots*/ ctx[10].fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, /*$$scope*/ ctx[9], get_fallback_slot_context$2);

	const block = {
		c: function create() {
			if (fallback_slot) fallback_slot.c();
		},
		m: function mount(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (fallback_slot) {
				if (fallback_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						fallback_slot,
						fallback_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(fallback_slot_template, /*$$scope*/ ctx[9], dirty, get_fallback_slot_changes$2),
						get_fallback_slot_context$2
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fallback_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$3.name,
		type: "else",
		source: "(60:0) {:else}",
		ctx
	});

	return block;
}

// (58:24) 
function create_if_block_1$2(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[10].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[9], get_loading_slot_context$2);

	const block = {
		c: function create() {
			if (loading_slot) loading_slot.c();
		},
		m: function mount(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[9], dirty, get_loading_slot_changes$2),
						get_loading_slot_context$2
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(58:24) ",
		ctx
	});

	return block;
}

// (52:0) {#if $store}
function create_if_block$4(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$3);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$3),
						get_default_slot_context$3
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(52:0) {#if $store}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	const before_slot_template = /*#slots*/ ctx[10].before;
	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[9], get_before_slot_context$3);
	const if_block_creators = [create_if_block$4, create_if_block_1$2, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$store*/ ctx[1]) return 0;
		if (/*store*/ ctx[0].loading) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_slot_template = /*#slots*/ ctx[10].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[9], get_after_slot_context$3);

	const block = {
		c: function create() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_slot) after_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t1, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (before_slot) {
				if (before_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						before_slot,
						before_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(before_slot_template, /*$$scope*/ ctx[9], dirty, get_before_slot_changes$3),
						get_before_slot_context$3
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty & /*$$scope, $store, store*/ 515)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[9], dirty, get_after_slot_changes$3),
						get_after_slot_context$3
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block);
			transition_in(after_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(before_slot, local);
			transition_out(if_block);
			transition_out(after_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (before_slot) before_slot.d(detaching);
			if (detaching) detach_dev(t0);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t1);
			if (after_slot) after_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let $store,
		$$unsubscribe_store = noop,
		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(1, $store = $$value)), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StorageRef', slots, ['before','default','loading','fallback','after']);
	let { path = "" } = $$props;
	let { log = false } = $$props;
	let { traceId = "" } = $$props;
	let { startWith = undefined } = $$props;
	let { url = true } = $$props;
	let { meta = false } = $$props;
	const opts = { startWith, traceId, log, meta, url };
	let store = fileDownloadStore(path, opts);
	validate_store(store, 'store');
	$$subscribe_store();
	const dispatch = createEventDispatcher();
	let unsub;
	onMount(() => dispatch("ref", { ref: store.ref }));
	onDestroy(() => unsub());
	const writable_props = ['path', 'log', 'traceId', 'startWith', 'url', 'meta'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StorageRef> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('log' in $$props) $$invalidate(3, log = $$props.log);
		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate(5, startWith = $$props.startWith);
		if ('url' in $$props) $$invalidate(6, url = $$props.url);
		if ('meta' in $$props) $$invalidate(7, meta = $$props.meta);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		path,
		log,
		traceId,
		startWith,
		url,
		meta,
		onDestroy,
		onMount,
		createEventDispatcher,
		fileDownloadStore,
		opts,
		store,
		dispatch,
		unsub,
		$store
	});

	$$self.$inject_state = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('log' in $$props) $$invalidate(3, log = $$props.log);
		if ('traceId' in $$props) $$invalidate(4, traceId = $$props.traceId);
		if ('startWith' in $$props) $$invalidate(5, startWith = $$props.startWith);
		if ('url' in $$props) $$invalidate(6, url = $$props.url);
		if ('meta' in $$props) $$invalidate(7, meta = $$props.meta);
		if ('store' in $$props) $$subscribe_store($$invalidate(0, store = $$props.store));
		if ('unsub' in $$props) $$invalidate(8, unsub = $$props.unsub);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*unsub, path, store*/ 261) {
			// Props changed
			 {
				if (unsub) {
					// Unsub and create new store
					unsub();

					$$subscribe_store($$invalidate(0, store = fileDownloadStore(path, opts)));
					dispatch("ref", { ref: store.ref });
				}

				$$invalidate(8, unsub = store.subscribe(result => {
					if (result) {
						dispatch("storageResult", {
							downloadURL: result[0],
							metadata: result[1]
						});
					}
				}));
			}
		}
	};

	return [store, $store, path, log, traceId, startWith, url, meta, unsub, $$scope, slots];
}

class StorageRef extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			path: 2,
			log: 3,
			traceId: 4,
			startWith: 5,
			url: 6,
			meta: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StorageRef",
			options,
			id: create_fragment$4.name
		});
	}

	get path() {
		throw new Error("<StorageRef>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set path(value) {
		throw new Error("<StorageRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get log() {
		throw new Error("<StorageRef>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set log(value) {
		throw new Error("<StorageRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get traceId() {
		throw new Error("<StorageRef>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set traceId(value) {
		throw new Error("<StorageRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get startWith() {
		throw new Error("<StorageRef>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set startWith(value) {
		throw new Error("<StorageRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<StorageRef>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<StorageRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get meta() {
		throw new Error("<StorageRef>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set meta(value) {
		throw new Error("<StorageRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\sveltefire\src\UploadTask.svelte generated by Svelte v3.46.3 */

const get_after_slot_changes$4 = dirty => ({
	snapshot: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	task: dirty & /*store*/ 1,
	downloadURL: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_after_slot_context$4 = ctx => ({
	snapshot: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	task: /*store*/ ctx[0].task,
	downloadURL: /*store*/ ctx[0].downloadURL,
	error: /*store*/ ctx[0].error
});

const get_complete_slot_changes = dirty => ({
	snapshot: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	task: dirty & /*store*/ 1,
	downloadURL: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_complete_slot_context = ctx => ({
	snapshot: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	task: /*store*/ ctx[0].task,
	downloadURL: /*store*/ ctx[0].downloadURL,
	error: /*store*/ ctx[0].error
});

const get_fallback_slot_changes$3 = dirty => ({
	snapshot: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	task: dirty & /*store*/ 1,
	downloadURL: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_fallback_slot_context$3 = ctx => ({
	snapshot: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	task: /*store*/ ctx[0].task,
	downloadURL: /*store*/ ctx[0].downloadURL,
	error: /*store*/ ctx[0].error
});

const get_default_slot_changes$4 = dirty => ({
	snapshot: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	task: dirty & /*store*/ 1,
	downloadURL: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_default_slot_context$4 = ctx => ({
	snapshot: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	task: /*store*/ ctx[0].task,
	downloadURL: /*store*/ ctx[0].downloadURL,
	error: /*store*/ ctx[0].error
});

const get_before_slot_changes$4 = dirty => ({
	snapshot: dirty & /*$store*/ 2,
	ref: dirty & /*store*/ 1,
	task: dirty & /*store*/ 1,
	downloadURL: dirty & /*store*/ 1,
	error: dirty & /*store*/ 1
});

const get_before_slot_context$4 = ctx => ({
	snapshot: /*$store*/ ctx[1],
	ref: /*store*/ ctx[0].ref,
	task: /*store*/ ctx[0].task,
	downloadURL: /*store*/ ctx[0].downloadURL,
	error: /*store*/ ctx[0].error
});

// (50:0) {:else}
function create_else_block$4(ctx) {
	let current;
	const fallback_slot_template = /*#slots*/ ctx[8].fallback;
	const fallback_slot = create_slot(fallback_slot_template, ctx, /*$$scope*/ ctx[7], get_fallback_slot_context$3);

	const block = {
		c: function create() {
			if (fallback_slot) fallback_slot.c();
		},
		m: function mount(target, anchor) {
			if (fallback_slot) {
				fallback_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (fallback_slot) {
				if (fallback_slot.p && (!current || dirty & /*$$scope, $store, store*/ 131)) {
					update_slot_base(
						fallback_slot,
						fallback_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(fallback_slot_template, /*$$scope*/ ctx[7], dirty, get_fallback_slot_changes$3),
						get_fallback_slot_context$3
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fallback_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fallback_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (fallback_slot) fallback_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$4.name,
		type: "else",
		source: "(50:0) {:else}",
		ctx
	});

	return block;
}

// (43:0) {#if $store}
function create_if_block_1$3(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$4);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $store, store*/ 131)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$4),
						get_default_slot_context$4
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(43:0) {#if $store}",
		ctx
	});

	return block;
}

// (54:0) {#if store.downloadURL}
function create_if_block$5(ctx) {
	let current;
	const complete_slot_template = /*#slots*/ ctx[8].complete;
	const complete_slot = create_slot(complete_slot_template, ctx, /*$$scope*/ ctx[7], get_complete_slot_context);

	const block = {
		c: function create() {
			if (complete_slot) complete_slot.c();
		},
		m: function mount(target, anchor) {
			if (complete_slot) {
				complete_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (complete_slot) {
				if (complete_slot.p && (!current || dirty & /*$$scope, $store, store*/ 131)) {
					update_slot_base(
						complete_slot,
						complete_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(complete_slot_template, /*$$scope*/ ctx[7], dirty, get_complete_slot_changes),
						get_complete_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(complete_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(complete_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (complete_slot) complete_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(54:0) {#if store.downloadURL}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let t0;
	let current_block_type_index;
	let if_block0;
	let t1;
	let t2;
	let current;
	const before_slot_template = /*#slots*/ ctx[8].before;
	const before_slot = create_slot(before_slot_template, ctx, /*$$scope*/ ctx[7], get_before_slot_context$4);
	const if_block_creators = [create_if_block_1$3, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$store*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*store*/ ctx[0].downloadURL && create_if_block$5(ctx);
	const after_slot_template = /*#slots*/ ctx[8].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[7], get_after_slot_context$4);

	const block = {
		c: function create() {
			if (before_slot) before_slot.c();
			t0 = space();
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (before_slot) {
				before_slot.m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t2, anchor);

			if (after_slot) {
				after_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (before_slot) {
				if (before_slot.p && (!current || dirty & /*$$scope, $store, store*/ 131)) {
					update_slot_base(
						before_slot,
						before_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(before_slot_template, /*$$scope*/ ctx[7], dirty, get_before_slot_changes$4),
						get_before_slot_context$4
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(t1.parentNode, t1);
			}

			if (/*store*/ ctx[0].downloadURL) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*store*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty & /*$$scope, $store, store*/ 131)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[7], dirty, get_after_slot_changes$4),
						get_after_slot_context$4
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(before_slot, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(after_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(before_slot, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(after_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (before_slot) before_slot.d(detaching);
			if (detaching) detach_dev(t0);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t2);
			if (after_slot) after_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let $store,
		$$unsubscribe_store = noop,
		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(1, $store = $$value)), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UploadTask', slots, ['before','default','fallback','complete','after']);
	let { path } = $$props;
	let { file } = $$props;
	let { log = false } = $$props;
	let { traceId = "" } = $$props;
	const opts = { traceId, log };
	let store = uploadTaskStore(path, file, opts);
	validate_store(store, 'store');
	$$subscribe_store();
	const dispatch = createEventDispatcher();
	let unsub;
	onMount(() => dispatch("ref", { ref: store.ref }));
	onDestroy(() => unsub());
	const writable_props = ['path', 'file', 'log', 'traceId'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UploadTask> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('file' in $$props) $$invalidate(3, file = $$props.file);
		if ('log' in $$props) $$invalidate(4, log = $$props.log);
		if ('traceId' in $$props) $$invalidate(5, traceId = $$props.traceId);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		path,
		file,
		log,
		traceId,
		onDestroy,
		onMount,
		createEventDispatcher,
		uploadTaskStore,
		opts,
		store,
		dispatch,
		unsub,
		$store
	});

	$$self.$inject_state = $$props => {
		if ('path' in $$props) $$invalidate(2, path = $$props.path);
		if ('file' in $$props) $$invalidate(3, file = $$props.file);
		if ('log' in $$props) $$invalidate(4, log = $$props.log);
		if ('traceId' in $$props) $$invalidate(5, traceId = $$props.traceId);
		if ('store' in $$props) $$subscribe_store($$invalidate(0, store = $$props.store));
		if ('unsub' in $$props) $$invalidate(6, unsub = $$props.unsub);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*unsub, path, file, store*/ 77) {
			// Props changed
			 {
				if (unsub) {
					// Unsub and create new store
					unsub();

					$$subscribe_store($$invalidate(0, store = uploadTaskStore(path, file, opts)));
					dispatch("ref", { ref: store.ref });
				}

				$$invalidate(6, unsub = store.subscribe(snapshot => {
					dispatch("snapshot", { snapshot });
				}));
			}
		}
	};

	return [store, $store, path, file, log, traceId, unsub, $$scope, slots];
}

class UploadTask extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { path: 2, file: 3, log: 4, traceId: 5 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UploadTask",
			options,
			id: create_fragment$5.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*path*/ ctx[2] === undefined && !('path' in props)) {
			console.warn("<UploadTask> was created without expected prop 'path'");
		}

		if (/*file*/ ctx[3] === undefined && !('file' in props)) {
			console.warn("<UploadTask> was created without expected prop 'file'");
		}
	}

	get path() {
		throw new Error("<UploadTask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set path(value) {
		throw new Error("<UploadTask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get file() {
		throw new Error("<UploadTask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set file(value) {
		throw new Error("<UploadTask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get log() {
		throw new Error("<UploadTask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set log(value) {
		throw new Error("<UploadTask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get traceId() {
		throw new Error("<UploadTask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set traceId(value) {
		throw new Error("<UploadTask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Collection, Doc, FirebaseApp, StorageRef, UploadTask, User, collectionStore, docStore, fileDownloadStore, uploadTaskStore, userStore };
